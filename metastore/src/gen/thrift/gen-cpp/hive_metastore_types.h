/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hive_metastore_TYPES_H
#define hive_metastore_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "fb303_types.h"


namespace Apache { namespace Hadoop { namespace Hive {

struct HiveObjectType {
  enum type {
    GLOBAL = 1,
    DATABASE = 2,
    TABLE = 3,
    PARTITION = 4,
    COLUMN = 5
  };
};

extern const std::map<int, const char*> _HiveObjectType_VALUES_TO_NAMES;

struct PrincipalType {
  enum type {
    USER = 1,
    ROLE = 2,
    GROUP = 3
  };
};

extern const std::map<int, const char*> _PrincipalType_VALUES_TO_NAMES;

struct PartitionEventType {
  enum type {
    LOAD_DONE = 1
  };
};

extern const std::map<int, const char*> _PartitionEventType_VALUES_TO_NAMES;

struct TxnState {
  enum type {
    COMMITTED = 1,
    ABORTED = 2,
    OPEN = 3
  };
};

extern const std::map<int, const char*> _TxnState_VALUES_TO_NAMES;

struct LockLevel {
  enum type {
    DB = 1,
    TABLE = 2,
    PARTITION = 3
  };
};

extern const std::map<int, const char*> _LockLevel_VALUES_TO_NAMES;

struct LockState {
  enum type {
    ACQUIRED = 1,
    WAITING = 2,
    ABORT = 3,
    NOT_ACQUIRED = 4
  };
};

extern const std::map<int, const char*> _LockState_VALUES_TO_NAMES;

struct LockType {
  enum type {
    SHARED_READ = 1,
    SHARED_WRITE = 2,
    EXCLUSIVE = 3
  };
};

extern const std::map<int, const char*> _LockType_VALUES_TO_NAMES;

struct CompactionType {
  enum type {
    MINOR = 1,
    MAJOR = 2
  };
};

extern const std::map<int, const char*> _CompactionType_VALUES_TO_NAMES;

struct GrantRevokeType {
  enum type {
    GRANT = 1,
    REVOKE = 2
  };
};

extern const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES;

struct EventRequestType {
  enum type {
    INSERT = 1,
    UPDATE = 2,
    DELETE = 3
  };
};

extern const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES;

struct FunctionType {
  enum type {
    JAVA = 1
  };
};

extern const std::map<int, const char*> _FunctionType_VALUES_TO_NAMES;

struct ResourceType {
  enum type {
    JAR = 1,
    FILE = 2,
    ARCHIVE = 3
  };
};

extern const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES;

typedef struct _Version__isset {
  _Version__isset() : version(false), comments(false) {}
  bool version;
  bool comments;
} _Version__isset;

class Version {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Version() : version(), comments() {
  }

  virtual ~Version() throw() {}

  std::string version;
  std::string comments;

  _Version__isset __isset;

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_comments(const std::string& val) {
    comments = val;
  }

  bool operator == (const Version & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(comments == rhs.comments))
      return false;
    return true;
  }
  bool operator != (const Version &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Version & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Version &a, Version &b);

typedef struct _FieldSchema__isset {
  _FieldSchema__isset() : name(false), type(false), comment(false) {}
  bool name;
  bool type;
  bool comment;
} _FieldSchema__isset;

class FieldSchema {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  FieldSchema() : name(), type(), comment() {
  }

  virtual ~FieldSchema() throw() {}

  std::string name;
  std::string type;
  std::string comment;

  _FieldSchema__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
  }

  bool operator == (const FieldSchema & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const FieldSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FieldSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FieldSchema &a, FieldSchema &b);

typedef struct _Type__isset {
  _Type__isset() : name(false), type1(false), type2(false), fields(false) {}
  bool name;
  bool type1;
  bool type2;
  bool fields;
} _Type__isset;

class Type {
 public:

  static const char* ascii_fingerprint; // = "20DF02DE523C27F7066C7BD4D9120842";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xDF,0x02,0xDE,0x52,0x3C,0x27,0xF7,0x06,0x6C,0x7B,0xD4,0xD9,0x12,0x08,0x42};

  Type() : name(), type1(), type2() {
  }

  virtual ~Type() throw() {}

  std::string name;
  std::string type1;
  std::string type2;
  std::vector<FieldSchema>  fields;

  _Type__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type1(const std::string& val) {
    type1 = val;
    __isset.type1 = true;
  }

  void __set_type2(const std::string& val) {
    type2 = val;
    __isset.type2 = true;
  }

  void __set_fields(const std::vector<FieldSchema> & val) {
    fields = val;
    __isset.fields = true;
  }

  bool operator == (const Type & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.type1 != rhs.__isset.type1)
      return false;
    else if (__isset.type1 && !(type1 == rhs.type1))
      return false;
    if (__isset.type2 != rhs.__isset.type2)
      return false;
    else if (__isset.type2 && !(type2 == rhs.type2))
      return false;
    if (__isset.fields != rhs.__isset.fields)
      return false;
    else if (__isset.fields && !(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const Type &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Type & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Type &a, Type &b);

typedef struct _HiveObjectRef__isset {
  _HiveObjectRef__isset() : objectType(false), dbName(false), objectName(false), partValues(false), columnName(false) {}
  bool objectType;
  bool dbName;
  bool objectName;
  bool partValues;
  bool columnName;
} _HiveObjectRef__isset;

class HiveObjectRef {
 public:

  static const char* ascii_fingerprint; // = "205CD8311CF3AA9EC161BAEF8D7C933C";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0x5C,0xD8,0x31,0x1C,0xF3,0xAA,0x9E,0xC1,0x61,0xBA,0xEF,0x8D,0x7C,0x93,0x3C};

  HiveObjectRef() : objectType((HiveObjectType::type)0), dbName(), objectName(), columnName() {
  }

  virtual ~HiveObjectRef() throw() {}

  HiveObjectType::type objectType;
  std::string dbName;
  std::string objectName;
  std::vector<std::string>  partValues;
  std::string columnName;

  _HiveObjectRef__isset __isset;

  void __set_objectType(const HiveObjectType::type val) {
    objectType = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_objectName(const std::string& val) {
    objectName = val;
  }

  void __set_partValues(const std::vector<std::string> & val) {
    partValues = val;
  }

  void __set_columnName(const std::string& val) {
    columnName = val;
  }

  bool operator == (const HiveObjectRef & rhs) const
  {
    if (!(objectType == rhs.objectType))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(objectName == rhs.objectName))
      return false;
    if (!(partValues == rhs.partValues))
      return false;
    if (!(columnName == rhs.columnName))
      return false;
    return true;
  }
  bool operator != (const HiveObjectRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HiveObjectRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HiveObjectRef &a, HiveObjectRef &b);

typedef struct _PrivilegeGrantInfo__isset {
  _PrivilegeGrantInfo__isset() : privilege(false), createTime(false), grantor(false), grantorType(false), grantOption(false) {}
  bool privilege;
  bool createTime;
  bool grantor;
  bool grantorType;
  bool grantOption;
} _PrivilegeGrantInfo__isset;

class PrivilegeGrantInfo {
 public:

  static const char* ascii_fingerprint; // = "A58923AF7294BE492D6F90E07E8CEE1F";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x89,0x23,0xAF,0x72,0x94,0xBE,0x49,0x2D,0x6F,0x90,0xE0,0x7E,0x8C,0xEE,0x1F};

  PrivilegeGrantInfo() : privilege(), createTime(0), grantor(), grantorType((PrincipalType::type)0), grantOption(0) {
  }

  virtual ~PrivilegeGrantInfo() throw() {}

  std::string privilege;
  int32_t createTime;
  std::string grantor;
  PrincipalType::type grantorType;
  bool grantOption;

  _PrivilegeGrantInfo__isset __isset;

  void __set_privilege(const std::string& val) {
    privilege = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_grantor(const std::string& val) {
    grantor = val;
  }

  void __set_grantorType(const PrincipalType::type val) {
    grantorType = val;
  }

  void __set_grantOption(const bool val) {
    grantOption = val;
  }

  bool operator == (const PrivilegeGrantInfo & rhs) const
  {
    if (!(privilege == rhs.privilege))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(grantor == rhs.grantor))
      return false;
    if (!(grantorType == rhs.grantorType))
      return false;
    if (!(grantOption == rhs.grantOption))
      return false;
    return true;
  }
  bool operator != (const PrivilegeGrantInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrivilegeGrantInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PrivilegeGrantInfo &a, PrivilegeGrantInfo &b);

typedef struct _HiveObjectPrivilege__isset {
  _HiveObjectPrivilege__isset() : hiveObject(false), principalName(false), principalType(false), grantInfo(false) {}
  bool hiveObject;
  bool principalName;
  bool principalType;
  bool grantInfo;
} _HiveObjectPrivilege__isset;

class HiveObjectPrivilege {
 public:

  static const char* ascii_fingerprint; // = "83D71969B23BD853E29DBA9D43B29AF8";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xD7,0x19,0x69,0xB2,0x3B,0xD8,0x53,0xE2,0x9D,0xBA,0x9D,0x43,0xB2,0x9A,0xF8};

  HiveObjectPrivilege() : principalName(), principalType((PrincipalType::type)0) {
  }

  virtual ~HiveObjectPrivilege() throw() {}

  HiveObjectRef hiveObject;
  std::string principalName;
  PrincipalType::type principalType;
  PrivilegeGrantInfo grantInfo;

  _HiveObjectPrivilege__isset __isset;

  void __set_hiveObject(const HiveObjectRef& val) {
    hiveObject = val;
  }

  void __set_principalName(const std::string& val) {
    principalName = val;
  }

  void __set_principalType(const PrincipalType::type val) {
    principalType = val;
  }

  void __set_grantInfo(const PrivilegeGrantInfo& val) {
    grantInfo = val;
  }

  bool operator == (const HiveObjectPrivilege & rhs) const
  {
    if (!(hiveObject == rhs.hiveObject))
      return false;
    if (!(principalName == rhs.principalName))
      return false;
    if (!(principalType == rhs.principalType))
      return false;
    if (!(grantInfo == rhs.grantInfo))
      return false;
    return true;
  }
  bool operator != (const HiveObjectPrivilege &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HiveObjectPrivilege & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HiveObjectPrivilege &a, HiveObjectPrivilege &b);

typedef struct _PrivilegeBag__isset {
  _PrivilegeBag__isset() : privileges(false) {}
  bool privileges;
} _PrivilegeBag__isset;

class PrivilegeBag {
 public:

  static const char* ascii_fingerprint; // = "BB89E4701B7B709B046A74C90B1147F2";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x89,0xE4,0x70,0x1B,0x7B,0x70,0x9B,0x04,0x6A,0x74,0xC9,0x0B,0x11,0x47,0xF2};

  PrivilegeBag() {
  }

  virtual ~PrivilegeBag() throw() {}

  std::vector<HiveObjectPrivilege>  privileges;

  _PrivilegeBag__isset __isset;

  void __set_privileges(const std::vector<HiveObjectPrivilege> & val) {
    privileges = val;
  }

  bool operator == (const PrivilegeBag & rhs) const
  {
    if (!(privileges == rhs.privileges))
      return false;
    return true;
  }
  bool operator != (const PrivilegeBag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrivilegeBag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PrivilegeBag &a, PrivilegeBag &b);

typedef struct _PrincipalPrivilegeSet__isset {
  _PrincipalPrivilegeSet__isset() : userPrivileges(false), groupPrivileges(false), rolePrivileges(false) {}
  bool userPrivileges;
  bool groupPrivileges;
  bool rolePrivileges;
} _PrincipalPrivilegeSet__isset;

class PrincipalPrivilegeSet {
 public:

  static const char* ascii_fingerprint; // = "08F75D2533906EA87BE34EA640856683";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0xF7,0x5D,0x25,0x33,0x90,0x6E,0xA8,0x7B,0xE3,0x4E,0xA6,0x40,0x85,0x66,0x83};

  PrincipalPrivilegeSet() {
  }

  virtual ~PrincipalPrivilegeSet() throw() {}

  std::map<std::string, std::vector<PrivilegeGrantInfo> >  userPrivileges;
  std::map<std::string, std::vector<PrivilegeGrantInfo> >  groupPrivileges;
  std::map<std::string, std::vector<PrivilegeGrantInfo> >  rolePrivileges;

  _PrincipalPrivilegeSet__isset __isset;

  void __set_userPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
    userPrivileges = val;
  }

  void __set_groupPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
    groupPrivileges = val;
  }

  void __set_rolePrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
    rolePrivileges = val;
  }

  bool operator == (const PrincipalPrivilegeSet & rhs) const
  {
    if (!(userPrivileges == rhs.userPrivileges))
      return false;
    if (!(groupPrivileges == rhs.groupPrivileges))
      return false;
    if (!(rolePrivileges == rhs.rolePrivileges))
      return false;
    return true;
  }
  bool operator != (const PrincipalPrivilegeSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PrincipalPrivilegeSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PrincipalPrivilegeSet &a, PrincipalPrivilegeSet &b);

typedef struct _GrantRevokePrivilegeRequest__isset {
  _GrantRevokePrivilegeRequest__isset() : requestType(false), privileges(false), revokeGrantOption(false) {}
  bool requestType;
  bool privileges;
  bool revokeGrantOption;
} _GrantRevokePrivilegeRequest__isset;

class GrantRevokePrivilegeRequest {
 public:

  static const char* ascii_fingerprint; // = "DF474A3CB526AD40DC0F2C3702F7AA2C";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x47,0x4A,0x3C,0xB5,0x26,0xAD,0x40,0xDC,0x0F,0x2C,0x37,0x02,0xF7,0xAA,0x2C};

  GrantRevokePrivilegeRequest() : requestType((GrantRevokeType::type)0), revokeGrantOption(0) {
  }

  virtual ~GrantRevokePrivilegeRequest() throw() {}

  GrantRevokeType::type requestType;
  PrivilegeBag privileges;
  bool revokeGrantOption;

  _GrantRevokePrivilegeRequest__isset __isset;

  void __set_requestType(const GrantRevokeType::type val) {
    requestType = val;
  }

  void __set_privileges(const PrivilegeBag& val) {
    privileges = val;
  }

  void __set_revokeGrantOption(const bool val) {
    revokeGrantOption = val;
    __isset.revokeGrantOption = true;
  }

  bool operator == (const GrantRevokePrivilegeRequest & rhs) const
  {
    if (!(requestType == rhs.requestType))
      return false;
    if (!(privileges == rhs.privileges))
      return false;
    if (__isset.revokeGrantOption != rhs.__isset.revokeGrantOption)
      return false;
    else if (__isset.revokeGrantOption && !(revokeGrantOption == rhs.revokeGrantOption))
      return false;
    return true;
  }
  bool operator != (const GrantRevokePrivilegeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GrantRevokePrivilegeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GrantRevokePrivilegeRequest &a, GrantRevokePrivilegeRequest &b);

typedef struct _GrantRevokePrivilegeResponse__isset {
  _GrantRevokePrivilegeResponse__isset() : success(false) {}
  bool success;
} _GrantRevokePrivilegeResponse__isset;

class GrantRevokePrivilegeResponse {
 public:

  static const char* ascii_fingerprint; // = "BF054652DEF86253C2BEE7D947F167DD";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

  GrantRevokePrivilegeResponse() : success(0) {
  }

  virtual ~GrantRevokePrivilegeResponse() throw() {}

  bool success;

  _GrantRevokePrivilegeResponse__isset __isset;

  void __set_success(const bool val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const GrantRevokePrivilegeResponse & rhs) const
  {
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GrantRevokePrivilegeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GrantRevokePrivilegeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GrantRevokePrivilegeResponse &a, GrantRevokePrivilegeResponse &b);

typedef struct _Role__isset {
  _Role__isset() : roleName(false), createTime(false), ownerName(false) {}
  bool roleName;
  bool createTime;
  bool ownerName;
} _Role__isset;

class Role {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

  Role() : roleName(), createTime(0), ownerName() {
  }

  virtual ~Role() throw() {}

  std::string roleName;
  int32_t createTime;
  std::string ownerName;

  _Role__isset __isset;

  void __set_roleName(const std::string& val) {
    roleName = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_ownerName(const std::string& val) {
    ownerName = val;
  }

  bool operator == (const Role & rhs) const
  {
    if (!(roleName == rhs.roleName))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(ownerName == rhs.ownerName))
      return false;
    return true;
  }
  bool operator != (const Role &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Role & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Role &a, Role &b);

typedef struct _RolePrincipalGrant__isset {
  _RolePrincipalGrant__isset() : roleName(false), principalName(false), principalType(false), grantOption(false), grantTime(false), grantorName(false), grantorPrincipalType(false) {}
  bool roleName;
  bool principalName;
  bool principalType;
  bool grantOption;
  bool grantTime;
  bool grantorName;
  bool grantorPrincipalType;
} _RolePrincipalGrant__isset;

class RolePrincipalGrant {
 public:

  static const char* ascii_fingerprint; // = "899BA3F6214DD1B79D27206BA857C772";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x9B,0xA3,0xF6,0x21,0x4D,0xD1,0xB7,0x9D,0x27,0x20,0x6B,0xA8,0x57,0xC7,0x72};

  RolePrincipalGrant() : roleName(), principalName(), principalType((PrincipalType::type)0), grantOption(0), grantTime(0), grantorName(), grantorPrincipalType((PrincipalType::type)0) {
  }

  virtual ~RolePrincipalGrant() throw() {}

  std::string roleName;
  std::string principalName;
  PrincipalType::type principalType;
  bool grantOption;
  int32_t grantTime;
  std::string grantorName;
  PrincipalType::type grantorPrincipalType;

  _RolePrincipalGrant__isset __isset;

  void __set_roleName(const std::string& val) {
    roleName = val;
  }

  void __set_principalName(const std::string& val) {
    principalName = val;
  }

  void __set_principalType(const PrincipalType::type val) {
    principalType = val;
  }

  void __set_grantOption(const bool val) {
    grantOption = val;
  }

  void __set_grantTime(const int32_t val) {
    grantTime = val;
  }

  void __set_grantorName(const std::string& val) {
    grantorName = val;
  }

  void __set_grantorPrincipalType(const PrincipalType::type val) {
    grantorPrincipalType = val;
  }

  bool operator == (const RolePrincipalGrant & rhs) const
  {
    if (!(roleName == rhs.roleName))
      return false;
    if (!(principalName == rhs.principalName))
      return false;
    if (!(principalType == rhs.principalType))
      return false;
    if (!(grantOption == rhs.grantOption))
      return false;
    if (!(grantTime == rhs.grantTime))
      return false;
    if (!(grantorName == rhs.grantorName))
      return false;
    if (!(grantorPrincipalType == rhs.grantorPrincipalType))
      return false;
    return true;
  }
  bool operator != (const RolePrincipalGrant &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RolePrincipalGrant & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RolePrincipalGrant &a, RolePrincipalGrant &b);


class GetRoleGrantsForPrincipalRequest {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  GetRoleGrantsForPrincipalRequest() : principal_name(), principal_type((PrincipalType::type)0) {
  }

  virtual ~GetRoleGrantsForPrincipalRequest() throw() {}

  std::string principal_name;
  PrincipalType::type principal_type;

  void __set_principal_name(const std::string& val) {
    principal_name = val;
  }

  void __set_principal_type(const PrincipalType::type val) {
    principal_type = val;
  }

  bool operator == (const GetRoleGrantsForPrincipalRequest & rhs) const
  {
    if (!(principal_name == rhs.principal_name))
      return false;
    if (!(principal_type == rhs.principal_type))
      return false;
    return true;
  }
  bool operator != (const GetRoleGrantsForPrincipalRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoleGrantsForPrincipalRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoleGrantsForPrincipalRequest &a, GetRoleGrantsForPrincipalRequest &b);


class GetRoleGrantsForPrincipalResponse {
 public:

  static const char* ascii_fingerprint; // = "5926B4B3541A62E17663820C7E3BE690";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0x26,0xB4,0xB3,0x54,0x1A,0x62,0xE1,0x76,0x63,0x82,0x0C,0x7E,0x3B,0xE6,0x90};

  GetRoleGrantsForPrincipalResponse() {
  }

  virtual ~GetRoleGrantsForPrincipalResponse() throw() {}

  std::vector<RolePrincipalGrant>  principalGrants;

  void __set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
    principalGrants = val;
  }

  bool operator == (const GetRoleGrantsForPrincipalResponse & rhs) const
  {
    if (!(principalGrants == rhs.principalGrants))
      return false;
    return true;
  }
  bool operator != (const GetRoleGrantsForPrincipalResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoleGrantsForPrincipalResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoleGrantsForPrincipalResponse &a, GetRoleGrantsForPrincipalResponse &b);


class GetPrincipalsInRoleRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetPrincipalsInRoleRequest() : roleName() {
  }

  virtual ~GetPrincipalsInRoleRequest() throw() {}

  std::string roleName;

  void __set_roleName(const std::string& val) {
    roleName = val;
  }

  bool operator == (const GetPrincipalsInRoleRequest & rhs) const
  {
    if (!(roleName == rhs.roleName))
      return false;
    return true;
  }
  bool operator != (const GetPrincipalsInRoleRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPrincipalsInRoleRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPrincipalsInRoleRequest &a, GetPrincipalsInRoleRequest &b);


class GetPrincipalsInRoleResponse {
 public:

  static const char* ascii_fingerprint; // = "5926B4B3541A62E17663820C7E3BE690";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0x26,0xB4,0xB3,0x54,0x1A,0x62,0xE1,0x76,0x63,0x82,0x0C,0x7E,0x3B,0xE6,0x90};

  GetPrincipalsInRoleResponse() {
  }

  virtual ~GetPrincipalsInRoleResponse() throw() {}

  std::vector<RolePrincipalGrant>  principalGrants;

  void __set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
    principalGrants = val;
  }

  bool operator == (const GetPrincipalsInRoleResponse & rhs) const
  {
    if (!(principalGrants == rhs.principalGrants))
      return false;
    return true;
  }
  bool operator != (const GetPrincipalsInRoleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPrincipalsInRoleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetPrincipalsInRoleResponse &a, GetPrincipalsInRoleResponse &b);

typedef struct _GrantRevokeRoleRequest__isset {
  _GrantRevokeRoleRequest__isset() : requestType(false), roleName(false), principalName(false), principalType(false), grantor(false), grantorType(false), grantOption(false) {}
  bool requestType;
  bool roleName;
  bool principalName;
  bool principalType;
  bool grantor;
  bool grantorType;
  bool grantOption;
} _GrantRevokeRoleRequest__isset;

class GrantRevokeRoleRequest {
 public:

  static const char* ascii_fingerprint; // = "907DEA796F2BA7AF76DC2566E75FAEE7";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x7D,0xEA,0x79,0x6F,0x2B,0xA7,0xAF,0x76,0xDC,0x25,0x66,0xE7,0x5F,0xAE,0xE7};

  GrantRevokeRoleRequest() : requestType((GrantRevokeType::type)0), roleName(), principalName(), principalType((PrincipalType::type)0), grantor(), grantorType((PrincipalType::type)0), grantOption(0) {
  }

  virtual ~GrantRevokeRoleRequest() throw() {}

  GrantRevokeType::type requestType;
  std::string roleName;
  std::string principalName;
  PrincipalType::type principalType;
  std::string grantor;
  PrincipalType::type grantorType;
  bool grantOption;

  _GrantRevokeRoleRequest__isset __isset;

  void __set_requestType(const GrantRevokeType::type val) {
    requestType = val;
  }

  void __set_roleName(const std::string& val) {
    roleName = val;
  }

  void __set_principalName(const std::string& val) {
    principalName = val;
  }

  void __set_principalType(const PrincipalType::type val) {
    principalType = val;
  }

  void __set_grantor(const std::string& val) {
    grantor = val;
    __isset.grantor = true;
  }

  void __set_grantorType(const PrincipalType::type val) {
    grantorType = val;
    __isset.grantorType = true;
  }

  void __set_grantOption(const bool val) {
    grantOption = val;
    __isset.grantOption = true;
  }

  bool operator == (const GrantRevokeRoleRequest & rhs) const
  {
    if (!(requestType == rhs.requestType))
      return false;
    if (!(roleName == rhs.roleName))
      return false;
    if (!(principalName == rhs.principalName))
      return false;
    if (!(principalType == rhs.principalType))
      return false;
    if (__isset.grantor != rhs.__isset.grantor)
      return false;
    else if (__isset.grantor && !(grantor == rhs.grantor))
      return false;
    if (__isset.grantorType != rhs.__isset.grantorType)
      return false;
    else if (__isset.grantorType && !(grantorType == rhs.grantorType))
      return false;
    if (__isset.grantOption != rhs.__isset.grantOption)
      return false;
    else if (__isset.grantOption && !(grantOption == rhs.grantOption))
      return false;
    return true;
  }
  bool operator != (const GrantRevokeRoleRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GrantRevokeRoleRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GrantRevokeRoleRequest &a, GrantRevokeRoleRequest &b);

typedef struct _GrantRevokeRoleResponse__isset {
  _GrantRevokeRoleResponse__isset() : success(false) {}
  bool success;
} _GrantRevokeRoleResponse__isset;

class GrantRevokeRoleResponse {
 public:

  static const char* ascii_fingerprint; // = "BF054652DEF86253C2BEE7D947F167DD";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

  GrantRevokeRoleResponse() : success(0) {
  }

  virtual ~GrantRevokeRoleResponse() throw() {}

  bool success;

  _GrantRevokeRoleResponse__isset __isset;

  void __set_success(const bool val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const GrantRevokeRoleResponse & rhs) const
  {
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GrantRevokeRoleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GrantRevokeRoleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GrantRevokeRoleResponse &a, GrantRevokeRoleResponse &b);

typedef struct _Database__isset {
  _Database__isset() : name(false), description(false), locationUri(false), parameters(false), privileges(false), ownerName(false), ownerType(false) {}
  bool name;
  bool description;
  bool locationUri;
  bool parameters;
  bool privileges;
  bool ownerName;
  bool ownerType;
} _Database__isset;

class Database {
 public:

  static const char* ascii_fingerprint; // = "553495CAE243A1C583D5C3DD990AED53";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x34,0x95,0xCA,0xE2,0x43,0xA1,0xC5,0x83,0xD5,0xC3,0xDD,0x99,0x0A,0xED,0x53};

  Database() : name(), description(), locationUri(), ownerName(), ownerType((PrincipalType::type)0) {
  }

  virtual ~Database() throw() {}

  std::string name;
  std::string description;
  std::string locationUri;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;
  std::string ownerName;
  PrincipalType::type ownerType;

  _Database__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_locationUri(const std::string& val) {
    locationUri = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_privileges(const PrincipalPrivilegeSet& val) {
    privileges = val;
    __isset.privileges = true;
  }

  void __set_ownerName(const std::string& val) {
    ownerName = val;
    __isset.ownerName = true;
  }

  void __set_ownerType(const PrincipalType::type val) {
    ownerType = val;
    __isset.ownerType = true;
  }

  bool operator == (const Database & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(locationUri == rhs.locationUri))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (__isset.privileges != rhs.__isset.privileges)
      return false;
    else if (__isset.privileges && !(privileges == rhs.privileges))
      return false;
    if (__isset.ownerName != rhs.__isset.ownerName)
      return false;
    else if (__isset.ownerName && !(ownerName == rhs.ownerName))
      return false;
    if (__isset.ownerType != rhs.__isset.ownerType)
      return false;
    else if (__isset.ownerType && !(ownerType == rhs.ownerType))
      return false;
    return true;
  }
  bool operator != (const Database &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Database &a, Database &b);

typedef struct _SerDeInfo__isset {
  _SerDeInfo__isset() : name(false), serializationLib(false), parameters(false) {}
  bool name;
  bool serializationLib;
  bool parameters;
} _SerDeInfo__isset;

class SerDeInfo {
 public:

  static const char* ascii_fingerprint; // = "B1021C32A35A2AEFCD2F57A5424159A7";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x02,0x1C,0x32,0xA3,0x5A,0x2A,0xEF,0xCD,0x2F,0x57,0xA5,0x42,0x41,0x59,0xA7};

  SerDeInfo() : name(), serializationLib() {
  }

  virtual ~SerDeInfo() throw() {}

  std::string name;
  std::string serializationLib;
  std::map<std::string, std::string>  parameters;

  _SerDeInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_serializationLib(const std::string& val) {
    serializationLib = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  bool operator == (const SerDeInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(serializationLib == rhs.serializationLib))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    return true;
  }
  bool operator != (const SerDeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SerDeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SerDeInfo &a, SerDeInfo &b);

typedef struct _Order__isset {
  _Order__isset() : col(false), order(false) {}
  bool col;
  bool order;
} _Order__isset;

class Order {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Order() : col(), order(0) {
  }

  virtual ~Order() throw() {}

  std::string col;
  int32_t order;

  _Order__isset __isset;

  void __set_col(const std::string& val) {
    col = val;
  }

  void __set_order(const int32_t val) {
    order = val;
  }

  bool operator == (const Order & rhs) const
  {
    if (!(col == rhs.col))
      return false;
    if (!(order == rhs.order))
      return false;
    return true;
  }
  bool operator != (const Order &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Order & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Order &a, Order &b);

typedef struct _SkewedInfo__isset {
  _SkewedInfo__isset() : skewedColNames(false), skewedColValues(false), skewedColValueLocationMaps(false) {}
  bool skewedColNames;
  bool skewedColValues;
  bool skewedColValueLocationMaps;
} _SkewedInfo__isset;

class SkewedInfo {
 public:

  static const char* ascii_fingerprint; // = "4BF2ED84BC3C3EB297A2AE2FA8427EB1";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xF2,0xED,0x84,0xBC,0x3C,0x3E,0xB2,0x97,0xA2,0xAE,0x2F,0xA8,0x42,0x7E,0xB1};

  SkewedInfo() {
  }

  virtual ~SkewedInfo() throw() {}

  std::vector<std::string>  skewedColNames;
  std::vector<std::vector<std::string> >  skewedColValues;
  std::map<std::vector<std::string> , std::string>  skewedColValueLocationMaps;

  _SkewedInfo__isset __isset;

  void __set_skewedColNames(const std::vector<std::string> & val) {
    skewedColNames = val;
  }

  void __set_skewedColValues(const std::vector<std::vector<std::string> > & val) {
    skewedColValues = val;
  }

  void __set_skewedColValueLocationMaps(const std::map<std::vector<std::string> , std::string> & val) {
    skewedColValueLocationMaps = val;
  }

  bool operator == (const SkewedInfo & rhs) const
  {
    if (!(skewedColNames == rhs.skewedColNames))
      return false;
    if (!(skewedColValues == rhs.skewedColValues))
      return false;
    if (!(skewedColValueLocationMaps == rhs.skewedColValueLocationMaps))
      return false;
    return true;
  }
  bool operator != (const SkewedInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkewedInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SkewedInfo &a, SkewedInfo &b);

typedef struct _StorageDescriptor__isset {
  _StorageDescriptor__isset() : cols(false), location(false), inputFormat(false), outputFormat(false), compressed(false), numBuckets(false), serdeInfo(false), bucketCols(false), sortCols(false), parameters(false), skewedInfo(false), storedAsSubDirectories(false) {}
  bool cols;
  bool location;
  bool inputFormat;
  bool outputFormat;
  bool compressed;
  bool numBuckets;
  bool serdeInfo;
  bool bucketCols;
  bool sortCols;
  bool parameters;
  bool skewedInfo;
  bool storedAsSubDirectories;
} _StorageDescriptor__isset;

class StorageDescriptor {
 public:

  static const char* ascii_fingerprint; // = "CA8C9AA5FE4C32643757D8639CEF0CD7";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x8C,0x9A,0xA5,0xFE,0x4C,0x32,0x64,0x37,0x57,0xD8,0x63,0x9C,0xEF,0x0C,0xD7};

  StorageDescriptor() : location(), inputFormat(), outputFormat(), compressed(0), numBuckets(0), storedAsSubDirectories(0) {
  }

  virtual ~StorageDescriptor() throw() {}

  std::vector<FieldSchema>  cols;
  std::string location;
  std::string inputFormat;
  std::string outputFormat;
  bool compressed;
  int32_t numBuckets;
  SerDeInfo serdeInfo;
  std::vector<std::string>  bucketCols;
  std::vector<Order>  sortCols;
  std::map<std::string, std::string>  parameters;
  SkewedInfo skewedInfo;
  bool storedAsSubDirectories;

  _StorageDescriptor__isset __isset;

  void __set_cols(const std::vector<FieldSchema> & val) {
    cols = val;
  }

  void __set_location(const std::string& val) {
    location = val;
  }

  void __set_inputFormat(const std::string& val) {
    inputFormat = val;
  }

  void __set_outputFormat(const std::string& val) {
    outputFormat = val;
  }

  void __set_compressed(const bool val) {
    compressed = val;
  }

  void __set_numBuckets(const int32_t val) {
    numBuckets = val;
  }

  void __set_serdeInfo(const SerDeInfo& val) {
    serdeInfo = val;
  }

  void __set_bucketCols(const std::vector<std::string> & val) {
    bucketCols = val;
  }

  void __set_sortCols(const std::vector<Order> & val) {
    sortCols = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_skewedInfo(const SkewedInfo& val) {
    skewedInfo = val;
    __isset.skewedInfo = true;
  }

  void __set_storedAsSubDirectories(const bool val) {
    storedAsSubDirectories = val;
    __isset.storedAsSubDirectories = true;
  }

  bool operator == (const StorageDescriptor & rhs) const
  {
    if (!(cols == rhs.cols))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(inputFormat == rhs.inputFormat))
      return false;
    if (!(outputFormat == rhs.outputFormat))
      return false;
    if (!(compressed == rhs.compressed))
      return false;
    if (!(numBuckets == rhs.numBuckets))
      return false;
    if (!(serdeInfo == rhs.serdeInfo))
      return false;
    if (!(bucketCols == rhs.bucketCols))
      return false;
    if (!(sortCols == rhs.sortCols))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (__isset.skewedInfo != rhs.__isset.skewedInfo)
      return false;
    else if (__isset.skewedInfo && !(skewedInfo == rhs.skewedInfo))
      return false;
    if (__isset.storedAsSubDirectories != rhs.__isset.storedAsSubDirectories)
      return false;
    else if (__isset.storedAsSubDirectories && !(storedAsSubDirectories == rhs.storedAsSubDirectories))
      return false;
    return true;
  }
  bool operator != (const StorageDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StorageDescriptor &a, StorageDescriptor &b);

typedef struct _Table__isset {
  _Table__isset() : tableName(false), dbName(false), owner(false), createTime(false), lastAccessTime(false), retention(false), sd(false), partitionKeys(false), parameters(false), viewOriginalText(false), viewExpandedText(false), tableType(false), privileges(false), temporary(true) {}
  bool tableName;
  bool dbName;
  bool owner;
  bool createTime;
  bool lastAccessTime;
  bool retention;
  bool sd;
  bool partitionKeys;
  bool parameters;
  bool viewOriginalText;
  bool viewExpandedText;
  bool tableType;
  bool privileges;
  bool temporary;
} _Table__isset;

class Table {
 public:

  static const char* ascii_fingerprint; // = "29EFB2A5970EF572039E5D94CC78AA85";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0xEF,0xB2,0xA5,0x97,0x0E,0xF5,0x72,0x03,0x9E,0x5D,0x94,0xCC,0x78,0xAA,0x85};

  Table() : tableName(), dbName(), owner(), createTime(0), lastAccessTime(0), retention(0), viewOriginalText(), viewExpandedText(), tableType(), temporary(false) {
  }

  virtual ~Table() throw() {}

  std::string tableName;
  std::string dbName;
  std::string owner;
  int32_t createTime;
  int32_t lastAccessTime;
  int32_t retention;
  StorageDescriptor sd;
  std::vector<FieldSchema>  partitionKeys;
  std::map<std::string, std::string>  parameters;
  std::string viewOriginalText;
  std::string viewExpandedText;
  std::string tableType;
  PrincipalPrivilegeSet privileges;
  bool temporary;

  _Table__isset __isset;

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_owner(const std::string& val) {
    owner = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_lastAccessTime(const int32_t val) {
    lastAccessTime = val;
  }

  void __set_retention(const int32_t val) {
    retention = val;
  }

  void __set_sd(const StorageDescriptor& val) {
    sd = val;
  }

  void __set_partitionKeys(const std::vector<FieldSchema> & val) {
    partitionKeys = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_viewOriginalText(const std::string& val) {
    viewOriginalText = val;
  }

  void __set_viewExpandedText(const std::string& val) {
    viewExpandedText = val;
  }

  void __set_tableType(const std::string& val) {
    tableType = val;
  }

  void __set_privileges(const PrincipalPrivilegeSet& val) {
    privileges = val;
    __isset.privileges = true;
  }

  void __set_temporary(const bool val) {
    temporary = val;
    __isset.temporary = true;
  }

  bool operator == (const Table & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(lastAccessTime == rhs.lastAccessTime))
      return false;
    if (!(retention == rhs.retention))
      return false;
    if (!(sd == rhs.sd))
      return false;
    if (!(partitionKeys == rhs.partitionKeys))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(viewOriginalText == rhs.viewOriginalText))
      return false;
    if (!(viewExpandedText == rhs.viewExpandedText))
      return false;
    if (!(tableType == rhs.tableType))
      return false;
    if (__isset.privileges != rhs.__isset.privileges)
      return false;
    else if (__isset.privileges && !(privileges == rhs.privileges))
      return false;
    if (__isset.temporary != rhs.__isset.temporary)
      return false;
    else if (__isset.temporary && !(temporary == rhs.temporary))
      return false;
    return true;
  }
  bool operator != (const Table &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Table & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Table &a, Table &b);

typedef struct _Partition__isset {
  _Partition__isset() : values(false), dbName(false), tableName(false), createTime(false), lastAccessTime(false), sd(false), parameters(false), privileges(false) {}
  bool values;
  bool dbName;
  bool tableName;
  bool createTime;
  bool lastAccessTime;
  bool sd;
  bool parameters;
  bool privileges;
} _Partition__isset;

class Partition {
 public:

  static const char* ascii_fingerprint; // = "31A52241B88A426C34087FE38343FF51";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xA5,0x22,0x41,0xB8,0x8A,0x42,0x6C,0x34,0x08,0x7F,0xE3,0x83,0x43,0xFF,0x51};

  Partition() : dbName(), tableName(), createTime(0), lastAccessTime(0) {
  }

  virtual ~Partition() throw() {}

  std::vector<std::string>  values;
  std::string dbName;
  std::string tableName;
  int32_t createTime;
  int32_t lastAccessTime;
  StorageDescriptor sd;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;

  _Partition__isset __isset;

  void __set_values(const std::vector<std::string> & val) {
    values = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_lastAccessTime(const int32_t val) {
    lastAccessTime = val;
  }

  void __set_sd(const StorageDescriptor& val) {
    sd = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_privileges(const PrincipalPrivilegeSet& val) {
    privileges = val;
    __isset.privileges = true;
  }

  bool operator == (const Partition & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(lastAccessTime == rhs.lastAccessTime))
      return false;
    if (!(sd == rhs.sd))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (__isset.privileges != rhs.__isset.privileges)
      return false;
    else if (__isset.privileges && !(privileges == rhs.privileges))
      return false;
    return true;
  }
  bool operator != (const Partition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Partition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Partition &a, Partition &b);

typedef struct _PartitionWithoutSD__isset {
  _PartitionWithoutSD__isset() : values(false), createTime(false), lastAccessTime(false), relativePath(false), parameters(false), privileges(false) {}
  bool values;
  bool createTime;
  bool lastAccessTime;
  bool relativePath;
  bool parameters;
  bool privileges;
} _PartitionWithoutSD__isset;

class PartitionWithoutSD {
 public:

  static const char* ascii_fingerprint; // = "D79FA44499888D0E50B5625E0C536DEA";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0x9F,0xA4,0x44,0x99,0x88,0x8D,0x0E,0x50,0xB5,0x62,0x5E,0x0C,0x53,0x6D,0xEA};

  PartitionWithoutSD() : createTime(0), lastAccessTime(0), relativePath() {
  }

  virtual ~PartitionWithoutSD() throw() {}

  std::vector<std::string>  values;
  int32_t createTime;
  int32_t lastAccessTime;
  std::string relativePath;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;

  _PartitionWithoutSD__isset __isset;

  void __set_values(const std::vector<std::string> & val) {
    values = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_lastAccessTime(const int32_t val) {
    lastAccessTime = val;
  }

  void __set_relativePath(const std::string& val) {
    relativePath = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_privileges(const PrincipalPrivilegeSet& val) {
    privileges = val;
    __isset.privileges = true;
  }

  bool operator == (const PartitionWithoutSD & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(lastAccessTime == rhs.lastAccessTime))
      return false;
    if (!(relativePath == rhs.relativePath))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (__isset.privileges != rhs.__isset.privileges)
      return false;
    else if (__isset.privileges && !(privileges == rhs.privileges))
      return false;
    return true;
  }
  bool operator != (const PartitionWithoutSD &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionWithoutSD & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionWithoutSD &a, PartitionWithoutSD &b);

typedef struct _PartitionSpecWithSharedSD__isset {
  _PartitionSpecWithSharedSD__isset() : partitions(false), sd(false) {}
  bool partitions;
  bool sd;
} _PartitionSpecWithSharedSD__isset;

class PartitionSpecWithSharedSD {
 public:

  static const char* ascii_fingerprint; // = "7BEE9305B42DCD083FF06BEE6DDC61CF";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xEE,0x93,0x05,0xB4,0x2D,0xCD,0x08,0x3F,0xF0,0x6B,0xEE,0x6D,0xDC,0x61,0xCF};

  PartitionSpecWithSharedSD() {
  }

  virtual ~PartitionSpecWithSharedSD() throw() {}

  std::vector<PartitionWithoutSD>  partitions;
  StorageDescriptor sd;

  _PartitionSpecWithSharedSD__isset __isset;

  void __set_partitions(const std::vector<PartitionWithoutSD> & val) {
    partitions = val;
  }

  void __set_sd(const StorageDescriptor& val) {
    sd = val;
  }

  bool operator == (const PartitionSpecWithSharedSD & rhs) const
  {
    if (!(partitions == rhs.partitions))
      return false;
    if (!(sd == rhs.sd))
      return false;
    return true;
  }
  bool operator != (const PartitionSpecWithSharedSD &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionSpecWithSharedSD & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionSpecWithSharedSD &a, PartitionSpecWithSharedSD &b);

typedef struct _PartitionListComposingSpec__isset {
  _PartitionListComposingSpec__isset() : partitions(false) {}
  bool partitions;
} _PartitionListComposingSpec__isset;

class PartitionListComposingSpec {
 public:

  static const char* ascii_fingerprint; // = "A048235CB9A257C8A74E3691BEFE0674";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x48,0x23,0x5C,0xB9,0xA2,0x57,0xC8,0xA7,0x4E,0x36,0x91,0xBE,0xFE,0x06,0x74};

  PartitionListComposingSpec() {
  }

  virtual ~PartitionListComposingSpec() throw() {}

  std::vector<Partition>  partitions;

  _PartitionListComposingSpec__isset __isset;

  void __set_partitions(const std::vector<Partition> & val) {
    partitions = val;
  }

  bool operator == (const PartitionListComposingSpec & rhs) const
  {
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const PartitionListComposingSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionListComposingSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionListComposingSpec &a, PartitionListComposingSpec &b);

typedef struct _PartitionSpec__isset {
  _PartitionSpec__isset() : dbName(false), tableName(false), rootPath(false), sharedSDPartitionSpec(false), partitionList(false) {}
  bool dbName;
  bool tableName;
  bool rootPath;
  bool sharedSDPartitionSpec;
  bool partitionList;
} _PartitionSpec__isset;

class PartitionSpec {
 public:

  static const char* ascii_fingerprint; // = "C3F548C24D072CF6422F25096143E3E8";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xF5,0x48,0xC2,0x4D,0x07,0x2C,0xF6,0x42,0x2F,0x25,0x09,0x61,0x43,0xE3,0xE8};

  PartitionSpec() : dbName(), tableName(), rootPath() {
  }

  virtual ~PartitionSpec() throw() {}

  std::string dbName;
  std::string tableName;
  std::string rootPath;
  PartitionSpecWithSharedSD sharedSDPartitionSpec;
  PartitionListComposingSpec partitionList;

  _PartitionSpec__isset __isset;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_rootPath(const std::string& val) {
    rootPath = val;
  }

  void __set_sharedSDPartitionSpec(const PartitionSpecWithSharedSD& val) {
    sharedSDPartitionSpec = val;
    __isset.sharedSDPartitionSpec = true;
  }

  void __set_partitionList(const PartitionListComposingSpec& val) {
    partitionList = val;
    __isset.partitionList = true;
  }

  bool operator == (const PartitionSpec & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (!(rootPath == rhs.rootPath))
      return false;
    if (__isset.sharedSDPartitionSpec != rhs.__isset.sharedSDPartitionSpec)
      return false;
    else if (__isset.sharedSDPartitionSpec && !(sharedSDPartitionSpec == rhs.sharedSDPartitionSpec))
      return false;
    if (__isset.partitionList != rhs.__isset.partitionList)
      return false;
    else if (__isset.partitionList && !(partitionList == rhs.partitionList))
      return false;
    return true;
  }
  bool operator != (const PartitionSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionSpec &a, PartitionSpec &b);

typedef struct _Index__isset {
  _Index__isset() : indexName(false), indexHandlerClass(false), dbName(false), origTableName(false), createTime(false), lastAccessTime(false), indexTableName(false), sd(false), parameters(false), deferredRebuild(false) {}
  bool indexName;
  bool indexHandlerClass;
  bool dbName;
  bool origTableName;
  bool createTime;
  bool lastAccessTime;
  bool indexTableName;
  bool sd;
  bool parameters;
  bool deferredRebuild;
} _Index__isset;

class Index {
 public:

  static const char* ascii_fingerprint; // = "09EEF655216AC81802850988D6C470A6";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xEE,0xF6,0x55,0x21,0x6A,0xC8,0x18,0x02,0x85,0x09,0x88,0xD6,0xC4,0x70,0xA6};

  Index() : indexName(), indexHandlerClass(), dbName(), origTableName(), createTime(0), lastAccessTime(0), indexTableName(), deferredRebuild(0) {
  }

  virtual ~Index() throw() {}

  std::string indexName;
  std::string indexHandlerClass;
  std::string dbName;
  std::string origTableName;
  int32_t createTime;
  int32_t lastAccessTime;
  std::string indexTableName;
  StorageDescriptor sd;
  std::map<std::string, std::string>  parameters;
  bool deferredRebuild;

  _Index__isset __isset;

  void __set_indexName(const std::string& val) {
    indexName = val;
  }

  void __set_indexHandlerClass(const std::string& val) {
    indexHandlerClass = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_origTableName(const std::string& val) {
    origTableName = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_lastAccessTime(const int32_t val) {
    lastAccessTime = val;
  }

  void __set_indexTableName(const std::string& val) {
    indexTableName = val;
  }

  void __set_sd(const StorageDescriptor& val) {
    sd = val;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
  }

  void __set_deferredRebuild(const bool val) {
    deferredRebuild = val;
  }

  bool operator == (const Index & rhs) const
  {
    if (!(indexName == rhs.indexName))
      return false;
    if (!(indexHandlerClass == rhs.indexHandlerClass))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(origTableName == rhs.origTableName))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(lastAccessTime == rhs.lastAccessTime))
      return false;
    if (!(indexTableName == rhs.indexTableName))
      return false;
    if (!(sd == rhs.sd))
      return false;
    if (!(parameters == rhs.parameters))
      return false;
    if (!(deferredRebuild == rhs.deferredRebuild))
      return false;
    return true;
  }
  bool operator != (const Index &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Index & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Index &a, Index &b);


class BooleanColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "EA2D65F1E0BB78760205682082304B41";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x2D,0x65,0xF1,0xE0,0xBB,0x78,0x76,0x02,0x05,0x68,0x20,0x82,0x30,0x4B,0x41};

  BooleanColumnStatsData() : numTrues(0), numFalses(0), numNulls(0) {
  }

  virtual ~BooleanColumnStatsData() throw() {}

  int64_t numTrues;
  int64_t numFalses;
  int64_t numNulls;

  void __set_numTrues(const int64_t val) {
    numTrues = val;
  }

  void __set_numFalses(const int64_t val) {
    numFalses = val;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  bool operator == (const BooleanColumnStatsData & rhs) const
  {
    if (!(numTrues == rhs.numTrues))
      return false;
    if (!(numFalses == rhs.numFalses))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    return true;
  }
  bool operator != (const BooleanColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BooleanColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BooleanColumnStatsData &a, BooleanColumnStatsData &b);

typedef struct _DoubleColumnStatsData__isset {
  _DoubleColumnStatsData__isset() : lowValue(false), highValue(false) {}
  bool lowValue;
  bool highValue;
} _DoubleColumnStatsData__isset;

class DoubleColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "DA7C011321D74C48396AA002E61A0CBB";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x7C,0x01,0x13,0x21,0xD7,0x4C,0x48,0x39,0x6A,0xA0,0x02,0xE6,0x1A,0x0C,0xBB};

  DoubleColumnStatsData() : lowValue(0), highValue(0), numNulls(0), numDVs(0) {
  }

  virtual ~DoubleColumnStatsData() throw() {}

  double lowValue;
  double highValue;
  int64_t numNulls;
  int64_t numDVs;

  _DoubleColumnStatsData__isset __isset;

  void __set_lowValue(const double val) {
    lowValue = val;
    __isset.lowValue = true;
  }

  void __set_highValue(const double val) {
    highValue = val;
    __isset.highValue = true;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  void __set_numDVs(const int64_t val) {
    numDVs = val;
  }

  bool operator == (const DoubleColumnStatsData & rhs) const
  {
    if (__isset.lowValue != rhs.__isset.lowValue)
      return false;
    else if (__isset.lowValue && !(lowValue == rhs.lowValue))
      return false;
    if (__isset.highValue != rhs.__isset.highValue)
      return false;
    else if (__isset.highValue && !(highValue == rhs.highValue))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    if (!(numDVs == rhs.numDVs))
      return false;
    return true;
  }
  bool operator != (const DoubleColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DoubleColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DoubleColumnStatsData &a, DoubleColumnStatsData &b);

typedef struct _LongColumnStatsData__isset {
  _LongColumnStatsData__isset() : lowValue(false), highValue(false) {}
  bool lowValue;
  bool highValue;
} _LongColumnStatsData__isset;

class LongColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "E685FC220B24E3B8B93604790DCB9AEA";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x85,0xFC,0x22,0x0B,0x24,0xE3,0xB8,0xB9,0x36,0x04,0x79,0x0D,0xCB,0x9A,0xEA};

  LongColumnStatsData() : lowValue(0), highValue(0), numNulls(0), numDVs(0) {
  }

  virtual ~LongColumnStatsData() throw() {}

  int64_t lowValue;
  int64_t highValue;
  int64_t numNulls;
  int64_t numDVs;

  _LongColumnStatsData__isset __isset;

  void __set_lowValue(const int64_t val) {
    lowValue = val;
    __isset.lowValue = true;
  }

  void __set_highValue(const int64_t val) {
    highValue = val;
    __isset.highValue = true;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  void __set_numDVs(const int64_t val) {
    numDVs = val;
  }

  bool operator == (const LongColumnStatsData & rhs) const
  {
    if (__isset.lowValue != rhs.__isset.lowValue)
      return false;
    else if (__isset.lowValue && !(lowValue == rhs.lowValue))
      return false;
    if (__isset.highValue != rhs.__isset.highValue)
      return false;
    else if (__isset.highValue && !(highValue == rhs.highValue))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    if (!(numDVs == rhs.numDVs))
      return false;
    return true;
  }
  bool operator != (const LongColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LongColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LongColumnStatsData &a, LongColumnStatsData &b);


class StringColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "D017B08C3DF12C3AB98788B2E67DAAB3";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x17,0xB0,0x8C,0x3D,0xF1,0x2C,0x3A,0xB9,0x87,0x88,0xB2,0xE6,0x7D,0xAA,0xB3};

  StringColumnStatsData() : maxColLen(0), avgColLen(0), numNulls(0), numDVs(0) {
  }

  virtual ~StringColumnStatsData() throw() {}

  int64_t maxColLen;
  double avgColLen;
  int64_t numNulls;
  int64_t numDVs;

  void __set_maxColLen(const int64_t val) {
    maxColLen = val;
  }

  void __set_avgColLen(const double val) {
    avgColLen = val;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  void __set_numDVs(const int64_t val) {
    numDVs = val;
  }

  bool operator == (const StringColumnStatsData & rhs) const
  {
    if (!(maxColLen == rhs.maxColLen))
      return false;
    if (!(avgColLen == rhs.avgColLen))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    if (!(numDVs == rhs.numDVs))
      return false;
    return true;
  }
  bool operator != (const StringColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StringColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StringColumnStatsData &a, StringColumnStatsData &b);


class BinaryColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "22B0CB67183FCDB945892B9974518D06";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xB0,0xCB,0x67,0x18,0x3F,0xCD,0xB9,0x45,0x89,0x2B,0x99,0x74,0x51,0x8D,0x06};

  BinaryColumnStatsData() : maxColLen(0), avgColLen(0), numNulls(0) {
  }

  virtual ~BinaryColumnStatsData() throw() {}

  int64_t maxColLen;
  double avgColLen;
  int64_t numNulls;

  void __set_maxColLen(const int64_t val) {
    maxColLen = val;
  }

  void __set_avgColLen(const double val) {
    avgColLen = val;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  bool operator == (const BinaryColumnStatsData & rhs) const
  {
    if (!(maxColLen == rhs.maxColLen))
      return false;
    if (!(avgColLen == rhs.avgColLen))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    return true;
  }
  bool operator != (const BinaryColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BinaryColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BinaryColumnStatsData &a, BinaryColumnStatsData &b);


class Decimal {
 public:

  static const char* ascii_fingerprint; // = "C4DDF6759F9B17C5C380806CE743DE8E";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xDD,0xF6,0x75,0x9F,0x9B,0x17,0xC5,0xC3,0x80,0x80,0x6C,0xE7,0x43,0xDE,0x8E};

  Decimal() : unscaled(), scale(0) {
  }

  virtual ~Decimal() throw() {}

  std::string unscaled;
  int16_t scale;

  void __set_unscaled(const std::string& val) {
    unscaled = val;
  }

  void __set_scale(const int16_t val) {
    scale = val;
  }

  bool operator == (const Decimal & rhs) const
  {
    if (!(unscaled == rhs.unscaled))
      return false;
    if (!(scale == rhs.scale))
      return false;
    return true;
  }
  bool operator != (const Decimal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Decimal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Decimal &a, Decimal &b);

typedef struct _DecimalColumnStatsData__isset {
  _DecimalColumnStatsData__isset() : lowValue(false), highValue(false) {}
  bool lowValue;
  bool highValue;
} _DecimalColumnStatsData__isset;

class DecimalColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "B6D47E7A28922BFA93FE05E9F1B04748";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0xD4,0x7E,0x7A,0x28,0x92,0x2B,0xFA,0x93,0xFE,0x05,0xE9,0xF1,0xB0,0x47,0x48};

  DecimalColumnStatsData() : numNulls(0), numDVs(0) {
  }

  virtual ~DecimalColumnStatsData() throw() {}

  Decimal lowValue;
  Decimal highValue;
  int64_t numNulls;
  int64_t numDVs;

  _DecimalColumnStatsData__isset __isset;

  void __set_lowValue(const Decimal& val) {
    lowValue = val;
    __isset.lowValue = true;
  }

  void __set_highValue(const Decimal& val) {
    highValue = val;
    __isset.highValue = true;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  void __set_numDVs(const int64_t val) {
    numDVs = val;
  }

  bool operator == (const DecimalColumnStatsData & rhs) const
  {
    if (__isset.lowValue != rhs.__isset.lowValue)
      return false;
    else if (__isset.lowValue && !(lowValue == rhs.lowValue))
      return false;
    if (__isset.highValue != rhs.__isset.highValue)
      return false;
    else if (__isset.highValue && !(highValue == rhs.highValue))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    if (!(numDVs == rhs.numDVs))
      return false;
    return true;
  }
  bool operator != (const DecimalColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DecimalColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DecimalColumnStatsData &a, DecimalColumnStatsData &b);


class Date {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Date() : daysSinceEpoch(0) {
  }

  virtual ~Date() throw() {}

  int64_t daysSinceEpoch;

  void __set_daysSinceEpoch(const int64_t val) {
    daysSinceEpoch = val;
  }

  bool operator == (const Date & rhs) const
  {
    if (!(daysSinceEpoch == rhs.daysSinceEpoch))
      return false;
    return true;
  }
  bool operator != (const Date &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Date & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Date &a, Date &b);

typedef struct _DateColumnStatsData__isset {
  _DateColumnStatsData__isset() : lowValue(false), highValue(false) {}
  bool lowValue;
  bool highValue;
} _DateColumnStatsData__isset;

class DateColumnStatsData {
 public:

  static const char* ascii_fingerprint; // = "D0719F3BBA8248297BB5287552897F59";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x71,0x9F,0x3B,0xBA,0x82,0x48,0x29,0x7B,0xB5,0x28,0x75,0x52,0x89,0x7F,0x59};

  DateColumnStatsData() : numNulls(0), numDVs(0) {
  }

  virtual ~DateColumnStatsData() throw() {}

  Date lowValue;
  Date highValue;
  int64_t numNulls;
  int64_t numDVs;

  _DateColumnStatsData__isset __isset;

  void __set_lowValue(const Date& val) {
    lowValue = val;
    __isset.lowValue = true;
  }

  void __set_highValue(const Date& val) {
    highValue = val;
    __isset.highValue = true;
  }

  void __set_numNulls(const int64_t val) {
    numNulls = val;
  }

  void __set_numDVs(const int64_t val) {
    numDVs = val;
  }

  bool operator == (const DateColumnStatsData & rhs) const
  {
    if (__isset.lowValue != rhs.__isset.lowValue)
      return false;
    else if (__isset.lowValue && !(lowValue == rhs.lowValue))
      return false;
    if (__isset.highValue != rhs.__isset.highValue)
      return false;
    else if (__isset.highValue && !(highValue == rhs.highValue))
      return false;
    if (!(numNulls == rhs.numNulls))
      return false;
    if (!(numDVs == rhs.numDVs))
      return false;
    return true;
  }
  bool operator != (const DateColumnStatsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateColumnStatsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DateColumnStatsData &a, DateColumnStatsData &b);

typedef struct _ColumnStatisticsData__isset {
  _ColumnStatisticsData__isset() : booleanStats(false), longStats(false), doubleStats(false), stringStats(false), binaryStats(false), decimalStats(false), dateStats(false) {}
  bool booleanStats;
  bool longStats;
  bool doubleStats;
  bool stringStats;
  bool binaryStats;
  bool decimalStats;
  bool dateStats;
} _ColumnStatisticsData__isset;

class ColumnStatisticsData {
 public:

  static const char* ascii_fingerprint; // = "15E449CA15A23E37F2D54C31ACA52106";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xE4,0x49,0xCA,0x15,0xA2,0x3E,0x37,0xF2,0xD5,0x4C,0x31,0xAC,0xA5,0x21,0x06};

  ColumnStatisticsData() {
  }

  virtual ~ColumnStatisticsData() throw() {}

  BooleanColumnStatsData booleanStats;
  LongColumnStatsData longStats;
  DoubleColumnStatsData doubleStats;
  StringColumnStatsData stringStats;
  BinaryColumnStatsData binaryStats;
  DecimalColumnStatsData decimalStats;
  DateColumnStatsData dateStats;

  _ColumnStatisticsData__isset __isset;

  void __set_booleanStats(const BooleanColumnStatsData& val) {
    booleanStats = val;
  }

  void __set_longStats(const LongColumnStatsData& val) {
    longStats = val;
  }

  void __set_doubleStats(const DoubleColumnStatsData& val) {
    doubleStats = val;
  }

  void __set_stringStats(const StringColumnStatsData& val) {
    stringStats = val;
  }

  void __set_binaryStats(const BinaryColumnStatsData& val) {
    binaryStats = val;
  }

  void __set_decimalStats(const DecimalColumnStatsData& val) {
    decimalStats = val;
  }

  void __set_dateStats(const DateColumnStatsData& val) {
    dateStats = val;
  }

  bool operator == (const ColumnStatisticsData & rhs) const
  {
    if (!(booleanStats == rhs.booleanStats))
      return false;
    if (!(longStats == rhs.longStats))
      return false;
    if (!(doubleStats == rhs.doubleStats))
      return false;
    if (!(stringStats == rhs.stringStats))
      return false;
    if (!(binaryStats == rhs.binaryStats))
      return false;
    if (!(decimalStats == rhs.decimalStats))
      return false;
    if (!(dateStats == rhs.dateStats))
      return false;
    return true;
  }
  bool operator != (const ColumnStatisticsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnStatisticsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnStatisticsData &a, ColumnStatisticsData &b);


class ColumnStatisticsObj {
 public:

  static const char* ascii_fingerprint; // = "A82BA819C9FFEDDEBC0D50F6F4E46534";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x2B,0xA8,0x19,0xC9,0xFF,0xED,0xDE,0xBC,0x0D,0x50,0xF6,0xF4,0xE4,0x65,0x34};

  ColumnStatisticsObj() : colName(), colType() {
  }

  virtual ~ColumnStatisticsObj() throw() {}

  std::string colName;
  std::string colType;
  ColumnStatisticsData statsData;

  void __set_colName(const std::string& val) {
    colName = val;
  }

  void __set_colType(const std::string& val) {
    colType = val;
  }

  void __set_statsData(const ColumnStatisticsData& val) {
    statsData = val;
  }

  bool operator == (const ColumnStatisticsObj & rhs) const
  {
    if (!(colName == rhs.colName))
      return false;
    if (!(colType == rhs.colType))
      return false;
    if (!(statsData == rhs.statsData))
      return false;
    return true;
  }
  bool operator != (const ColumnStatisticsObj &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnStatisticsObj & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnStatisticsObj &a, ColumnStatisticsObj &b);

typedef struct _ColumnStatisticsDesc__isset {
  _ColumnStatisticsDesc__isset() : partName(false), lastAnalyzed(false) {}
  bool partName;
  bool lastAnalyzed;
} _ColumnStatisticsDesc__isset;

class ColumnStatisticsDesc {
 public:

  static const char* ascii_fingerprint; // = "261759FF6F8FAB53F941453007FE18CB";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x17,0x59,0xFF,0x6F,0x8F,0xAB,0x53,0xF9,0x41,0x45,0x30,0x07,0xFE,0x18,0xCB};

  ColumnStatisticsDesc() : isTblLevel(0), dbName(), tableName(), partName(), lastAnalyzed(0) {
  }

  virtual ~ColumnStatisticsDesc() throw() {}

  bool isTblLevel;
  std::string dbName;
  std::string tableName;
  std::string partName;
  int64_t lastAnalyzed;

  _ColumnStatisticsDesc__isset __isset;

  void __set_isTblLevel(const bool val) {
    isTblLevel = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
  }

  void __set_partName(const std::string& val) {
    partName = val;
    __isset.partName = true;
  }

  void __set_lastAnalyzed(const int64_t val) {
    lastAnalyzed = val;
    __isset.lastAnalyzed = true;
  }

  bool operator == (const ColumnStatisticsDesc & rhs) const
  {
    if (!(isTblLevel == rhs.isTblLevel))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (__isset.partName != rhs.__isset.partName)
      return false;
    else if (__isset.partName && !(partName == rhs.partName))
      return false;
    if (__isset.lastAnalyzed != rhs.__isset.lastAnalyzed)
      return false;
    else if (__isset.lastAnalyzed && !(lastAnalyzed == rhs.lastAnalyzed))
      return false;
    return true;
  }
  bool operator != (const ColumnStatisticsDesc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnStatisticsDesc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnStatisticsDesc &a, ColumnStatisticsDesc &b);


class ColumnStatistics {
 public:

  static const char* ascii_fingerprint; // = "8A64D0A67FFD3A372726A320B3913D5A";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x64,0xD0,0xA6,0x7F,0xFD,0x3A,0x37,0x27,0x26,0xA3,0x20,0xB3,0x91,0x3D,0x5A};

  ColumnStatistics() {
  }

  virtual ~ColumnStatistics() throw() {}

  ColumnStatisticsDesc statsDesc;
  std::vector<ColumnStatisticsObj>  statsObj;

  void __set_statsDesc(const ColumnStatisticsDesc& val) {
    statsDesc = val;
  }

  void __set_statsObj(const std::vector<ColumnStatisticsObj> & val) {
    statsObj = val;
  }

  bool operator == (const ColumnStatistics & rhs) const
  {
    if (!(statsDesc == rhs.statsDesc))
      return false;
    if (!(statsObj == rhs.statsObj))
      return false;
    return true;
  }
  bool operator != (const ColumnStatistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnStatistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnStatistics &a, ColumnStatistics &b);


class AggrStats {
 public:

  static const char* ascii_fingerprint; // = "1FC765A3AB2954591C14B0D946778213";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0xC7,0x65,0xA3,0xAB,0x29,0x54,0x59,0x1C,0x14,0xB0,0xD9,0x46,0x77,0x82,0x13};

  AggrStats() : partsFound(0) {
  }

  virtual ~AggrStats() throw() {}

  std::vector<ColumnStatisticsObj>  colStats;
  int64_t partsFound;

  void __set_colStats(const std::vector<ColumnStatisticsObj> & val) {
    colStats = val;
  }

  void __set_partsFound(const int64_t val) {
    partsFound = val;
  }

  bool operator == (const AggrStats & rhs) const
  {
    if (!(colStats == rhs.colStats))
      return false;
    if (!(partsFound == rhs.partsFound))
      return false;
    return true;
  }
  bool operator != (const AggrStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AggrStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AggrStats &a, AggrStats &b);


class SetPartitionsStatsRequest {
 public:

  static const char* ascii_fingerprint; // = "8BCBF2CE9E942D0FB7D8F4ED57D8DC27";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xCB,0xF2,0xCE,0x9E,0x94,0x2D,0x0F,0xB7,0xD8,0xF4,0xED,0x57,0xD8,0xDC,0x27};

  SetPartitionsStatsRequest() {
  }

  virtual ~SetPartitionsStatsRequest() throw() {}

  std::vector<ColumnStatistics>  colStats;

  void __set_colStats(const std::vector<ColumnStatistics> & val) {
    colStats = val;
  }

  bool operator == (const SetPartitionsStatsRequest & rhs) const
  {
    if (!(colStats == rhs.colStats))
      return false;
    return true;
  }
  bool operator != (const SetPartitionsStatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPartitionsStatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetPartitionsStatsRequest &a, SetPartitionsStatsRequest &b);

typedef struct _Schema__isset {
  _Schema__isset() : fieldSchemas(false), properties(false) {}
  bool fieldSchemas;
  bool properties;
} _Schema__isset;

class Schema {
 public:

  static const char* ascii_fingerprint; // = "5CFEE46C975F4E2368D905109B8E3B5B";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xFE,0xE4,0x6C,0x97,0x5F,0x4E,0x23,0x68,0xD9,0x05,0x10,0x9B,0x8E,0x3B,0x5B};

  Schema() {
  }

  virtual ~Schema() throw() {}

  std::vector<FieldSchema>  fieldSchemas;
  std::map<std::string, std::string>  properties;

  _Schema__isset __isset;

  void __set_fieldSchemas(const std::vector<FieldSchema> & val) {
    fieldSchemas = val;
  }

  void __set_properties(const std::map<std::string, std::string> & val) {
    properties = val;
  }

  bool operator == (const Schema & rhs) const
  {
    if (!(fieldSchemas == rhs.fieldSchemas))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const Schema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Schema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Schema &a, Schema &b);

typedef struct _EnvironmentContext__isset {
  _EnvironmentContext__isset() : properties(false) {}
  bool properties;
} _EnvironmentContext__isset;

class EnvironmentContext {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  EnvironmentContext() {
  }

  virtual ~EnvironmentContext() throw() {}

  std::map<std::string, std::string>  properties;

  _EnvironmentContext__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val) {
    properties = val;
  }

  bool operator == (const EnvironmentContext & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const EnvironmentContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnvironmentContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnvironmentContext &a, EnvironmentContext &b);


class PartitionsByExprResult {
 public:

  static const char* ascii_fingerprint; // = "40B789CC91B508FE36600A14E3F80425";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0xB7,0x89,0xCC,0x91,0xB5,0x08,0xFE,0x36,0x60,0x0A,0x14,0xE3,0xF8,0x04,0x25};

  PartitionsByExprResult() : hasUnknownPartitions(0) {
  }

  virtual ~PartitionsByExprResult() throw() {}

  std::vector<Partition>  partitions;
  bool hasUnknownPartitions;

  void __set_partitions(const std::vector<Partition> & val) {
    partitions = val;
  }

  void __set_hasUnknownPartitions(const bool val) {
    hasUnknownPartitions = val;
  }

  bool operator == (const PartitionsByExprResult & rhs) const
  {
    if (!(partitions == rhs.partitions))
      return false;
    if (!(hasUnknownPartitions == rhs.hasUnknownPartitions))
      return false;
    return true;
  }
  bool operator != (const PartitionsByExprResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionsByExprResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionsByExprResult &a, PartitionsByExprResult &b);

typedef struct _PartitionsByExprRequest__isset {
  _PartitionsByExprRequest__isset() : defaultPartitionName(false), maxParts(true) {}
  bool defaultPartitionName;
  bool maxParts;
} _PartitionsByExprRequest__isset;

class PartitionsByExprRequest {
 public:

  static const char* ascii_fingerprint; // = "835944417A026FE6ABD0DF5A35BF52C5";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x59,0x44,0x41,0x7A,0x02,0x6F,0xE6,0xAB,0xD0,0xDF,0x5A,0x35,0xBF,0x52,0xC5};

  PartitionsByExprRequest() : dbName(), tblName(), expr(), defaultPartitionName(), maxParts(-1) {
  }

  virtual ~PartitionsByExprRequest() throw() {}

  std::string dbName;
  std::string tblName;
  std::string expr;
  std::string defaultPartitionName;
  int16_t maxParts;

  _PartitionsByExprRequest__isset __isset;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tblName(const std::string& val) {
    tblName = val;
  }

  void __set_expr(const std::string& val) {
    expr = val;
  }

  void __set_defaultPartitionName(const std::string& val) {
    defaultPartitionName = val;
    __isset.defaultPartitionName = true;
  }

  void __set_maxParts(const int16_t val) {
    maxParts = val;
    __isset.maxParts = true;
  }

  bool operator == (const PartitionsByExprRequest & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tblName == rhs.tblName))
      return false;
    if (!(expr == rhs.expr))
      return false;
    if (__isset.defaultPartitionName != rhs.__isset.defaultPartitionName)
      return false;
    else if (__isset.defaultPartitionName && !(defaultPartitionName == rhs.defaultPartitionName))
      return false;
    if (__isset.maxParts != rhs.__isset.maxParts)
      return false;
    else if (__isset.maxParts && !(maxParts == rhs.maxParts))
      return false;
    return true;
  }
  bool operator != (const PartitionsByExprRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionsByExprRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionsByExprRequest &a, PartitionsByExprRequest &b);


class TableStatsResult {
 public:

  static const char* ascii_fingerprint; // = "2E398BAC949C93A194F1A19CA5074FF8";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x39,0x8B,0xAC,0x94,0x9C,0x93,0xA1,0x94,0xF1,0xA1,0x9C,0xA5,0x07,0x4F,0xF8};

  TableStatsResult() {
  }

  virtual ~TableStatsResult() throw() {}

  std::vector<ColumnStatisticsObj>  tableStats;

  void __set_tableStats(const std::vector<ColumnStatisticsObj> & val) {
    tableStats = val;
  }

  bool operator == (const TableStatsResult & rhs) const
  {
    if (!(tableStats == rhs.tableStats))
      return false;
    return true;
  }
  bool operator != (const TableStatsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableStatsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableStatsResult &a, TableStatsResult &b);


class PartitionsStatsResult {
 public:

  static const char* ascii_fingerprint; // = "DD38B4AA7D02E288659AA12CBAAEF33B";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x38,0xB4,0xAA,0x7D,0x02,0xE2,0x88,0x65,0x9A,0xA1,0x2C,0xBA,0xAE,0xF3,0x3B};

  PartitionsStatsResult() {
  }

  virtual ~PartitionsStatsResult() throw() {}

  std::map<std::string, std::vector<ColumnStatisticsObj> >  partStats;

  void __set_partStats(const std::map<std::string, std::vector<ColumnStatisticsObj> > & val) {
    partStats = val;
  }

  bool operator == (const PartitionsStatsResult & rhs) const
  {
    if (!(partStats == rhs.partStats))
      return false;
    return true;
  }
  bool operator != (const PartitionsStatsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionsStatsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionsStatsResult &a, PartitionsStatsResult &b);


class TableStatsRequest {
 public:

  static const char* ascii_fingerprint; // = "8E2AD6401E83558ECFD6A13D74DD0A3F";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

  TableStatsRequest() : dbName(), tblName() {
  }

  virtual ~TableStatsRequest() throw() {}

  std::string dbName;
  std::string tblName;
  std::vector<std::string>  colNames;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tblName(const std::string& val) {
    tblName = val;
  }

  void __set_colNames(const std::vector<std::string> & val) {
    colNames = val;
  }

  bool operator == (const TableStatsRequest & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tblName == rhs.tblName))
      return false;
    if (!(colNames == rhs.colNames))
      return false;
    return true;
  }
  bool operator != (const TableStatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableStatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableStatsRequest &a, TableStatsRequest &b);


class PartitionsStatsRequest {
 public:

  static const char* ascii_fingerprint; // = "5F51D90BC323BCE4B704B7D98EDA0BD4";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x51,0xD9,0x0B,0xC3,0x23,0xBC,0xE4,0xB7,0x04,0xB7,0xD9,0x8E,0xDA,0x0B,0xD4};

  PartitionsStatsRequest() : dbName(), tblName() {
  }

  virtual ~PartitionsStatsRequest() throw() {}

  std::string dbName;
  std::string tblName;
  std::vector<std::string>  colNames;
  std::vector<std::string>  partNames;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tblName(const std::string& val) {
    tblName = val;
  }

  void __set_colNames(const std::vector<std::string> & val) {
    colNames = val;
  }

  void __set_partNames(const std::vector<std::string> & val) {
    partNames = val;
  }

  bool operator == (const PartitionsStatsRequest & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tblName == rhs.tblName))
      return false;
    if (!(colNames == rhs.colNames))
      return false;
    if (!(partNames == rhs.partNames))
      return false;
    return true;
  }
  bool operator != (const PartitionsStatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionsStatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PartitionsStatsRequest &a, PartitionsStatsRequest &b);

typedef struct _AddPartitionsResult__isset {
  _AddPartitionsResult__isset() : partitions(false) {}
  bool partitions;
} _AddPartitionsResult__isset;

class AddPartitionsResult {
 public:

  static const char* ascii_fingerprint; // = "5A689D0823E7BFBB60C799BA60065C31";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x68,0x9D,0x08,0x23,0xE7,0xBF,0xBB,0x60,0xC7,0x99,0xBA,0x60,0x06,0x5C,0x31};

  AddPartitionsResult() {
  }

  virtual ~AddPartitionsResult() throw() {}

  std::vector<Partition>  partitions;

  _AddPartitionsResult__isset __isset;

  void __set_partitions(const std::vector<Partition> & val) {
    partitions = val;
    __isset.partitions = true;
  }

  bool operator == (const AddPartitionsResult & rhs) const
  {
    if (__isset.partitions != rhs.__isset.partitions)
      return false;
    else if (__isset.partitions && !(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const AddPartitionsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddPartitionsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddPartitionsResult &a, AddPartitionsResult &b);

typedef struct _AddPartitionsRequest__isset {
  _AddPartitionsRequest__isset() : needResult(true) {}
  bool needResult;
} _AddPartitionsRequest__isset;

class AddPartitionsRequest {
 public:

  static const char* ascii_fingerprint; // = "94F938D035892CF6873DEDB99358F069";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xF9,0x38,0xD0,0x35,0x89,0x2C,0xF6,0x87,0x3D,0xED,0xB9,0x93,0x58,0xF0,0x69};

  AddPartitionsRequest() : dbName(), tblName(), ifNotExists(0), needResult(true) {
  }

  virtual ~AddPartitionsRequest() throw() {}

  std::string dbName;
  std::string tblName;
  std::vector<Partition>  parts;
  bool ifNotExists;
  bool needResult;

  _AddPartitionsRequest__isset __isset;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tblName(const std::string& val) {
    tblName = val;
  }

  void __set_parts(const std::vector<Partition> & val) {
    parts = val;
  }

  void __set_ifNotExists(const bool val) {
    ifNotExists = val;
  }

  void __set_needResult(const bool val) {
    needResult = val;
    __isset.needResult = true;
  }

  bool operator == (const AddPartitionsRequest & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tblName == rhs.tblName))
      return false;
    if (!(parts == rhs.parts))
      return false;
    if (!(ifNotExists == rhs.ifNotExists))
      return false;
    if (__isset.needResult != rhs.__isset.needResult)
      return false;
    else if (__isset.needResult && !(needResult == rhs.needResult))
      return false;
    return true;
  }
  bool operator != (const AddPartitionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddPartitionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddPartitionsRequest &a, AddPartitionsRequest &b);

typedef struct _DropPartitionsResult__isset {
  _DropPartitionsResult__isset() : partitions(false) {}
  bool partitions;
} _DropPartitionsResult__isset;

class DropPartitionsResult {
 public:

  static const char* ascii_fingerprint; // = "5A689D0823E7BFBB60C799BA60065C31";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x68,0x9D,0x08,0x23,0xE7,0xBF,0xBB,0x60,0xC7,0x99,0xBA,0x60,0x06,0x5C,0x31};

  DropPartitionsResult() {
  }

  virtual ~DropPartitionsResult() throw() {}

  std::vector<Partition>  partitions;

  _DropPartitionsResult__isset __isset;

  void __set_partitions(const std::vector<Partition> & val) {
    partitions = val;
    __isset.partitions = true;
  }

  bool operator == (const DropPartitionsResult & rhs) const
  {
    if (__isset.partitions != rhs.__isset.partitions)
      return false;
    else if (__isset.partitions && !(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const DropPartitionsResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropPartitionsResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DropPartitionsResult &a, DropPartitionsResult &b);

typedef struct _DropPartitionsExpr__isset {
  _DropPartitionsExpr__isset() : partArchiveLevel(false) {}
  bool partArchiveLevel;
} _DropPartitionsExpr__isset;

class DropPartitionsExpr {
 public:

  static const char* ascii_fingerprint; // = "18B162B1D15D8D46509D3911A9F1C2AA";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xB1,0x62,0xB1,0xD1,0x5D,0x8D,0x46,0x50,0x9D,0x39,0x11,0xA9,0xF1,0xC2,0xAA};

  DropPartitionsExpr() : expr(), partArchiveLevel(0) {
  }

  virtual ~DropPartitionsExpr() throw() {}

  std::string expr;
  int32_t partArchiveLevel;

  _DropPartitionsExpr__isset __isset;

  void __set_expr(const std::string& val) {
    expr = val;
  }

  void __set_partArchiveLevel(const int32_t val) {
    partArchiveLevel = val;
    __isset.partArchiveLevel = true;
  }

  bool operator == (const DropPartitionsExpr & rhs) const
  {
    if (!(expr == rhs.expr))
      return false;
    if (__isset.partArchiveLevel != rhs.__isset.partArchiveLevel)
      return false;
    else if (__isset.partArchiveLevel && !(partArchiveLevel == rhs.partArchiveLevel))
      return false;
    return true;
  }
  bool operator != (const DropPartitionsExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropPartitionsExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DropPartitionsExpr &a, DropPartitionsExpr &b);

typedef struct _RequestPartsSpec__isset {
  _RequestPartsSpec__isset() : names(false), exprs(false) {}
  bool names;
  bool exprs;
} _RequestPartsSpec__isset;

class RequestPartsSpec {
 public:

  static const char* ascii_fingerprint; // = "864492ECAB27996CD222AACDA10C292E";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x44,0x92,0xEC,0xAB,0x27,0x99,0x6C,0xD2,0x22,0xAA,0xCD,0xA1,0x0C,0x29,0x2E};

  RequestPartsSpec() {
  }

  virtual ~RequestPartsSpec() throw() {}

  std::vector<std::string>  names;
  std::vector<DropPartitionsExpr>  exprs;

  _RequestPartsSpec__isset __isset;

  void __set_names(const std::vector<std::string> & val) {
    names = val;
  }

  void __set_exprs(const std::vector<DropPartitionsExpr> & val) {
    exprs = val;
  }

  bool operator == (const RequestPartsSpec & rhs) const
  {
    if (!(names == rhs.names))
      return false;
    if (!(exprs == rhs.exprs))
      return false;
    return true;
  }
  bool operator != (const RequestPartsSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestPartsSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestPartsSpec &a, RequestPartsSpec &b);

typedef struct _DropPartitionsRequest__isset {
  _DropPartitionsRequest__isset() : deleteData(false), ifExists(true), ignoreProtection(false), environmentContext(false), needResult(true) {}
  bool deleteData;
  bool ifExists;
  bool ignoreProtection;
  bool environmentContext;
  bool needResult;
} _DropPartitionsRequest__isset;

class DropPartitionsRequest {
 public:

  static const char* ascii_fingerprint; // = "EB263FBA01215C480A9A24C11D69E672";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x26,0x3F,0xBA,0x01,0x21,0x5C,0x48,0x0A,0x9A,0x24,0xC1,0x1D,0x69,0xE6,0x72};

  DropPartitionsRequest() : dbName(), tblName(), deleteData(0), ifExists(true), ignoreProtection(0), needResult(true) {
  }

  virtual ~DropPartitionsRequest() throw() {}

  std::string dbName;
  std::string tblName;
  RequestPartsSpec parts;
  bool deleteData;
  bool ifExists;
  bool ignoreProtection;
  EnvironmentContext environmentContext;
  bool needResult;

  _DropPartitionsRequest__isset __isset;

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_tblName(const std::string& val) {
    tblName = val;
  }

  void __set_parts(const RequestPartsSpec& val) {
    parts = val;
  }

  void __set_deleteData(const bool val) {
    deleteData = val;
    __isset.deleteData = true;
  }

  void __set_ifExists(const bool val) {
    ifExists = val;
    __isset.ifExists = true;
  }

  void __set_ignoreProtection(const bool val) {
    ignoreProtection = val;
    __isset.ignoreProtection = true;
  }

  void __set_environmentContext(const EnvironmentContext& val) {
    environmentContext = val;
    __isset.environmentContext = true;
  }

  void __set_needResult(const bool val) {
    needResult = val;
    __isset.needResult = true;
  }

  bool operator == (const DropPartitionsRequest & rhs) const
  {
    if (!(dbName == rhs.dbName))
      return false;
    if (!(tblName == rhs.tblName))
      return false;
    if (!(parts == rhs.parts))
      return false;
    if (__isset.deleteData != rhs.__isset.deleteData)
      return false;
    else if (__isset.deleteData && !(deleteData == rhs.deleteData))
      return false;
    if (__isset.ifExists != rhs.__isset.ifExists)
      return false;
    else if (__isset.ifExists && !(ifExists == rhs.ifExists))
      return false;
    if (__isset.ignoreProtection != rhs.__isset.ignoreProtection)
      return false;
    else if (__isset.ignoreProtection && !(ignoreProtection == rhs.ignoreProtection))
      return false;
    if (__isset.environmentContext != rhs.__isset.environmentContext)
      return false;
    else if (__isset.environmentContext && !(environmentContext == rhs.environmentContext))
      return false;
    if (__isset.needResult != rhs.__isset.needResult)
      return false;
    else if (__isset.needResult && !(needResult == rhs.needResult))
      return false;
    return true;
  }
  bool operator != (const DropPartitionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropPartitionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DropPartitionsRequest &a, DropPartitionsRequest &b);

typedef struct _ResourceUri__isset {
  _ResourceUri__isset() : resourceType(false), uri(false) {}
  bool resourceType;
  bool uri;
} _ResourceUri__isset;

class ResourceUri {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  ResourceUri() : resourceType((ResourceType::type)0), uri() {
  }

  virtual ~ResourceUri() throw() {}

  ResourceType::type resourceType;
  std::string uri;

  _ResourceUri__isset __isset;

  void __set_resourceType(const ResourceType::type val) {
    resourceType = val;
  }

  void __set_uri(const std::string& val) {
    uri = val;
  }

  bool operator == (const ResourceUri & rhs) const
  {
    if (!(resourceType == rhs.resourceType))
      return false;
    if (!(uri == rhs.uri))
      return false;
    return true;
  }
  bool operator != (const ResourceUri &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResourceUri & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResourceUri &a, ResourceUri &b);

typedef struct _Function__isset {
  _Function__isset() : functionName(false), dbName(false), className(false), ownerName(false), ownerType(false), createTime(false), functionType(false), resourceUris(false) {}
  bool functionName;
  bool dbName;
  bool className;
  bool ownerName;
  bool ownerType;
  bool createTime;
  bool functionType;
  bool resourceUris;
} _Function__isset;

class Function {
 public:

  static const char* ascii_fingerprint; // = "72279C515E70F888568542F97616ADB8";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x27,0x9C,0x51,0x5E,0x70,0xF8,0x88,0x56,0x85,0x42,0xF9,0x76,0x16,0xAD,0xB8};

  Function() : functionName(), dbName(), className(), ownerName(), ownerType((PrincipalType::type)0), createTime(0), functionType((FunctionType::type)0) {
  }

  virtual ~Function() throw() {}

  std::string functionName;
  std::string dbName;
  std::string className;
  std::string ownerName;
  PrincipalType::type ownerType;
  int32_t createTime;
  FunctionType::type functionType;
  std::vector<ResourceUri>  resourceUris;

  _Function__isset __isset;

  void __set_functionName(const std::string& val) {
    functionName = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
  }

  void __set_className(const std::string& val) {
    className = val;
  }

  void __set_ownerName(const std::string& val) {
    ownerName = val;
  }

  void __set_ownerType(const PrincipalType::type val) {
    ownerType = val;
  }

  void __set_createTime(const int32_t val) {
    createTime = val;
  }

  void __set_functionType(const FunctionType::type val) {
    functionType = val;
  }

  void __set_resourceUris(const std::vector<ResourceUri> & val) {
    resourceUris = val;
  }

  bool operator == (const Function & rhs) const
  {
    if (!(functionName == rhs.functionName))
      return false;
    if (!(dbName == rhs.dbName))
      return false;
    if (!(className == rhs.className))
      return false;
    if (!(ownerName == rhs.ownerName))
      return false;
    if (!(ownerType == rhs.ownerType))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(functionType == rhs.functionType))
      return false;
    if (!(resourceUris == rhs.resourceUris))
      return false;
    return true;
  }
  bool operator != (const Function &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Function & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Function &a, Function &b);


class TxnInfo {
 public:

  static const char* ascii_fingerprint; // = "6C5C0773A901CCA3BE9D085B3B47A767";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x5C,0x07,0x73,0xA9,0x01,0xCC,0xA3,0xBE,0x9D,0x08,0x5B,0x3B,0x47,0xA7,0x67};

  TxnInfo() : id(0), state((TxnState::type)0), user(), hostname() {
  }

  virtual ~TxnInfo() throw() {}

  int64_t id;
  TxnState::type state;
  std::string user;
  std::string hostname;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_state(const TxnState::type val) {
    state = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const TxnInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const TxnInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TxnInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TxnInfo &a, TxnInfo &b);


class GetOpenTxnsInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "CCF769BBD33005B61F2079A6665E3B9C";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0xF7,0x69,0xBB,0xD3,0x30,0x05,0xB6,0x1F,0x20,0x79,0xA6,0x66,0x5E,0x3B,0x9C};

  GetOpenTxnsInfoResponse() : txn_high_water_mark(0) {
  }

  virtual ~GetOpenTxnsInfoResponse() throw() {}

  int64_t txn_high_water_mark;
  std::vector<TxnInfo>  open_txns;

  void __set_txn_high_water_mark(const int64_t val) {
    txn_high_water_mark = val;
  }

  void __set_open_txns(const std::vector<TxnInfo> & val) {
    open_txns = val;
  }

  bool operator == (const GetOpenTxnsInfoResponse & rhs) const
  {
    if (!(txn_high_water_mark == rhs.txn_high_water_mark))
      return false;
    if (!(open_txns == rhs.open_txns))
      return false;
    return true;
  }
  bool operator != (const GetOpenTxnsInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetOpenTxnsInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetOpenTxnsInfoResponse &a, GetOpenTxnsInfoResponse &b);


class GetOpenTxnsResponse {
 public:

  static const char* ascii_fingerprint; // = "590531FF1BE8611678B255374F6109EE";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0x05,0x31,0xFF,0x1B,0xE8,0x61,0x16,0x78,0xB2,0x55,0x37,0x4F,0x61,0x09,0xEE};

  GetOpenTxnsResponse() : txn_high_water_mark(0) {
  }

  virtual ~GetOpenTxnsResponse() throw() {}

  int64_t txn_high_water_mark;
  std::set<int64_t>  open_txns;

  void __set_txn_high_water_mark(const int64_t val) {
    txn_high_water_mark = val;
  }

  void __set_open_txns(const std::set<int64_t> & val) {
    open_txns = val;
  }

  bool operator == (const GetOpenTxnsResponse & rhs) const
  {
    if (!(txn_high_water_mark == rhs.txn_high_water_mark))
      return false;
    if (!(open_txns == rhs.open_txns))
      return false;
    return true;
  }
  bool operator != (const GetOpenTxnsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetOpenTxnsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetOpenTxnsResponse &a, GetOpenTxnsResponse &b);


class OpenTxnRequest {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  OpenTxnRequest() : num_txns(0), user(), hostname() {
  }

  virtual ~OpenTxnRequest() throw() {}

  int32_t num_txns;
  std::string user;
  std::string hostname;

  void __set_num_txns(const int32_t val) {
    num_txns = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const OpenTxnRequest & rhs) const
  {
    if (!(num_txns == rhs.num_txns))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const OpenTxnRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OpenTxnRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OpenTxnRequest &a, OpenTxnRequest &b);


class OpenTxnsResponse {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

  OpenTxnsResponse() {
  }

  virtual ~OpenTxnsResponse() throw() {}

  std::vector<int64_t>  txn_ids;

  void __set_txn_ids(const std::vector<int64_t> & val) {
    txn_ids = val;
  }

  bool operator == (const OpenTxnsResponse & rhs) const
  {
    if (!(txn_ids == rhs.txn_ids))
      return false;
    return true;
  }
  bool operator != (const OpenTxnsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OpenTxnsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OpenTxnsResponse &a, OpenTxnsResponse &b);


class AbortTxnRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  AbortTxnRequest() : txnid(0) {
  }

  virtual ~AbortTxnRequest() throw() {}

  int64_t txnid;

  void __set_txnid(const int64_t val) {
    txnid = val;
  }

  bool operator == (const AbortTxnRequest & rhs) const
  {
    if (!(txnid == rhs.txnid))
      return false;
    return true;
  }
  bool operator != (const AbortTxnRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AbortTxnRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AbortTxnRequest &a, AbortTxnRequest &b);


class CommitTxnRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  CommitTxnRequest() : txnid(0) {
  }

  virtual ~CommitTxnRequest() throw() {}

  int64_t txnid;

  void __set_txnid(const int64_t val) {
    txnid = val;
  }

  bool operator == (const CommitTxnRequest & rhs) const
  {
    if (!(txnid == rhs.txnid))
      return false;
    return true;
  }
  bool operator != (const CommitTxnRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommitTxnRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommitTxnRequest &a, CommitTxnRequest &b);

typedef struct _LockComponent__isset {
  _LockComponent__isset() : tablename(false), partitionname(false) {}
  bool tablename;
  bool partitionname;
} _LockComponent__isset;

class LockComponent {
 public:

  static const char* ascii_fingerprint; // = "38B02531B0840AC9C72904A4649FD15F";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xB0,0x25,0x31,0xB0,0x84,0x0A,0xC9,0xC7,0x29,0x04,0xA4,0x64,0x9F,0xD1,0x5F};

  LockComponent() : type((LockType::type)0), level((LockLevel::type)0), dbname(), tablename(), partitionname() {
  }

  virtual ~LockComponent() throw() {}

  LockType::type type;
  LockLevel::type level;
  std::string dbname;
  std::string tablename;
  std::string partitionname;

  _LockComponent__isset __isset;

  void __set_type(const LockType::type val) {
    type = val;
  }

  void __set_level(const LockLevel::type val) {
    level = val;
  }

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_tablename(const std::string& val) {
    tablename = val;
    __isset.tablename = true;
  }

  void __set_partitionname(const std::string& val) {
    partitionname = val;
    __isset.partitionname = true;
  }

  bool operator == (const LockComponent & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    if (__isset.tablename != rhs.__isset.tablename)
      return false;
    else if (__isset.tablename && !(tablename == rhs.tablename))
      return false;
    if (__isset.partitionname != rhs.__isset.partitionname)
      return false;
    else if (__isset.partitionname && !(partitionname == rhs.partitionname))
      return false;
    return true;
  }
  bool operator != (const LockComponent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockComponent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockComponent &a, LockComponent &b);

typedef struct _LockRequest__isset {
  _LockRequest__isset() : txnid(false) {}
  bool txnid;
} _LockRequest__isset;

class LockRequest {
 public:

  static const char* ascii_fingerprint; // = "46BC5ED7196BC16CB216AD5CC67C6930";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xBC,0x5E,0xD7,0x19,0x6B,0xC1,0x6C,0xB2,0x16,0xAD,0x5C,0xC6,0x7C,0x69,0x30};

  LockRequest() : txnid(0), user(), hostname() {
  }

  virtual ~LockRequest() throw() {}

  std::vector<LockComponent>  component;
  int64_t txnid;
  std::string user;
  std::string hostname;

  _LockRequest__isset __isset;

  void __set_component(const std::vector<LockComponent> & val) {
    component = val;
  }

  void __set_txnid(const int64_t val) {
    txnid = val;
    __isset.txnid = true;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const LockRequest & rhs) const
  {
    if (!(component == rhs.component))
      return false;
    if (__isset.txnid != rhs.__isset.txnid)
      return false;
    else if (__isset.txnid && !(txnid == rhs.txnid))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const LockRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockRequest &a, LockRequest &b);


class LockResponse {
 public:

  static const char* ascii_fingerprint; // = "DFA40D9D2884599F3D1E7A57578F1384";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xA4,0x0D,0x9D,0x28,0x84,0x59,0x9F,0x3D,0x1E,0x7A,0x57,0x57,0x8F,0x13,0x84};

  LockResponse() : lockid(0), state((LockState::type)0) {
  }

  virtual ~LockResponse() throw() {}

  int64_t lockid;
  LockState::type state;

  void __set_lockid(const int64_t val) {
    lockid = val;
  }

  void __set_state(const LockState::type val) {
    state = val;
  }

  bool operator == (const LockResponse & rhs) const
  {
    if (!(lockid == rhs.lockid))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const LockResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LockResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LockResponse &a, LockResponse &b);


class CheckLockRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  CheckLockRequest() : lockid(0) {
  }

  virtual ~CheckLockRequest() throw() {}

  int64_t lockid;

  void __set_lockid(const int64_t val) {
    lockid = val;
  }

  bool operator == (const CheckLockRequest & rhs) const
  {
    if (!(lockid == rhs.lockid))
      return false;
    return true;
  }
  bool operator != (const CheckLockRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckLockRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CheckLockRequest &a, CheckLockRequest &b);


class UnlockRequest {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  UnlockRequest() : lockid(0) {
  }

  virtual ~UnlockRequest() throw() {}

  int64_t lockid;

  void __set_lockid(const int64_t val) {
    lockid = val;
  }

  bool operator == (const UnlockRequest & rhs) const
  {
    if (!(lockid == rhs.lockid))
      return false;
    return true;
  }
  bool operator != (const UnlockRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnlockRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnlockRequest &a, UnlockRequest &b);


class ShowLocksRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ShowLocksRequest() {
  }

  virtual ~ShowLocksRequest() throw() {}


  bool operator == (const ShowLocksRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowLocksRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowLocksRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowLocksRequest &a, ShowLocksRequest &b);

typedef struct _ShowLocksResponseElement__isset {
  _ShowLocksResponseElement__isset() : tablename(false), partname(false), txnid(false), acquiredat(false) {}
  bool tablename;
  bool partname;
  bool txnid;
  bool acquiredat;
} _ShowLocksResponseElement__isset;

class ShowLocksResponseElement {
 public:

  static const char* ascii_fingerprint; // = "5AD11F0E0EF1EE0A7C08B00FEFCFF24F";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xD1,0x1F,0x0E,0x0E,0xF1,0xEE,0x0A,0x7C,0x08,0xB0,0x0F,0xEF,0xCF,0xF2,0x4F};

  ShowLocksResponseElement() : lockid(0), dbname(), tablename(), partname(), state((LockState::type)0), type((LockType::type)0), txnid(0), lastheartbeat(0), acquiredat(0), user(), hostname() {
  }

  virtual ~ShowLocksResponseElement() throw() {}

  int64_t lockid;
  std::string dbname;
  std::string tablename;
  std::string partname;
  LockState::type state;
  LockType::type type;
  int64_t txnid;
  int64_t lastheartbeat;
  int64_t acquiredat;
  std::string user;
  std::string hostname;

  _ShowLocksResponseElement__isset __isset;

  void __set_lockid(const int64_t val) {
    lockid = val;
  }

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_tablename(const std::string& val) {
    tablename = val;
    __isset.tablename = true;
  }

  void __set_partname(const std::string& val) {
    partname = val;
    __isset.partname = true;
  }

  void __set_state(const LockState::type val) {
    state = val;
  }

  void __set_type(const LockType::type val) {
    type = val;
  }

  void __set_txnid(const int64_t val) {
    txnid = val;
    __isset.txnid = true;
  }

  void __set_lastheartbeat(const int64_t val) {
    lastheartbeat = val;
  }

  void __set_acquiredat(const int64_t val) {
    acquiredat = val;
    __isset.acquiredat = true;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const ShowLocksResponseElement & rhs) const
  {
    if (!(lockid == rhs.lockid))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    if (__isset.tablename != rhs.__isset.tablename)
      return false;
    else if (__isset.tablename && !(tablename == rhs.tablename))
      return false;
    if (__isset.partname != rhs.__isset.partname)
      return false;
    else if (__isset.partname && !(partname == rhs.partname))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.txnid != rhs.__isset.txnid)
      return false;
    else if (__isset.txnid && !(txnid == rhs.txnid))
      return false;
    if (!(lastheartbeat == rhs.lastheartbeat))
      return false;
    if (__isset.acquiredat != rhs.__isset.acquiredat)
      return false;
    else if (__isset.acquiredat && !(acquiredat == rhs.acquiredat))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const ShowLocksResponseElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowLocksResponseElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowLocksResponseElement &a, ShowLocksResponseElement &b);

typedef struct _ShowLocksResponse__isset {
  _ShowLocksResponse__isset() : locks(false) {}
  bool locks;
} _ShowLocksResponse__isset;

class ShowLocksResponse {
 public:

  static const char* ascii_fingerprint; // = "BD598AA60FE941361FB54C43973C011F";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x59,0x8A,0xA6,0x0F,0xE9,0x41,0x36,0x1F,0xB5,0x4C,0x43,0x97,0x3C,0x01,0x1F};

  ShowLocksResponse() {
  }

  virtual ~ShowLocksResponse() throw() {}

  std::vector<ShowLocksResponseElement>  locks;

  _ShowLocksResponse__isset __isset;

  void __set_locks(const std::vector<ShowLocksResponseElement> & val) {
    locks = val;
  }

  bool operator == (const ShowLocksResponse & rhs) const
  {
    if (!(locks == rhs.locks))
      return false;
    return true;
  }
  bool operator != (const ShowLocksResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowLocksResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowLocksResponse &a, ShowLocksResponse &b);

typedef struct _HeartbeatRequest__isset {
  _HeartbeatRequest__isset() : lockid(false), txnid(false) {}
  bool lockid;
  bool txnid;
} _HeartbeatRequest__isset;

class HeartbeatRequest {
 public:

  static const char* ascii_fingerprint; // = "0354D07C94CB8542872CA1277008860A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

  HeartbeatRequest() : lockid(0), txnid(0) {
  }

  virtual ~HeartbeatRequest() throw() {}

  int64_t lockid;
  int64_t txnid;

  _HeartbeatRequest__isset __isset;

  void __set_lockid(const int64_t val) {
    lockid = val;
    __isset.lockid = true;
  }

  void __set_txnid(const int64_t val) {
    txnid = val;
    __isset.txnid = true;
  }

  bool operator == (const HeartbeatRequest & rhs) const
  {
    if (__isset.lockid != rhs.__isset.lockid)
      return false;
    else if (__isset.lockid && !(lockid == rhs.lockid))
      return false;
    if (__isset.txnid != rhs.__isset.txnid)
      return false;
    else if (__isset.txnid && !(txnid == rhs.txnid))
      return false;
    return true;
  }
  bool operator != (const HeartbeatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartbeatRequest &a, HeartbeatRequest &b);


class HeartbeatTxnRangeRequest {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  HeartbeatTxnRangeRequest() : min(0), max(0) {
  }

  virtual ~HeartbeatTxnRangeRequest() throw() {}

  int64_t min;
  int64_t max;

  void __set_min(const int64_t val) {
    min = val;
  }

  void __set_max(const int64_t val) {
    max = val;
  }

  bool operator == (const HeartbeatTxnRangeRequest & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const HeartbeatTxnRangeRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatTxnRangeRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartbeatTxnRangeRequest &a, HeartbeatTxnRangeRequest &b);


class HeartbeatTxnRangeResponse {
 public:

  static const char* ascii_fingerprint; // = "33E49A70BD5C04262A0F407E3656E3CF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0xE4,0x9A,0x70,0xBD,0x5C,0x04,0x26,0x2A,0x0F,0x40,0x7E,0x36,0x56,0xE3,0xCF};

  HeartbeatTxnRangeResponse() {
  }

  virtual ~HeartbeatTxnRangeResponse() throw() {}

  std::set<int64_t>  aborted;
  std::set<int64_t>  nosuch;

  void __set_aborted(const std::set<int64_t> & val) {
    aborted = val;
  }

  void __set_nosuch(const std::set<int64_t> & val) {
    nosuch = val;
  }

  bool operator == (const HeartbeatTxnRangeResponse & rhs) const
  {
    if (!(aborted == rhs.aborted))
      return false;
    if (!(nosuch == rhs.nosuch))
      return false;
    return true;
  }
  bool operator != (const HeartbeatTxnRangeResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartbeatTxnRangeResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartbeatTxnRangeResponse &a, HeartbeatTxnRangeResponse &b);

typedef struct _CompactionRequest__isset {
  _CompactionRequest__isset() : partitionname(false), runas(false) {}
  bool partitionname;
  bool runas;
} _CompactionRequest__isset;

class CompactionRequest {
 public:

  static const char* ascii_fingerprint; // = "899FD1F339D8318D628687CC2CE2864B";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x9F,0xD1,0xF3,0x39,0xD8,0x31,0x8D,0x62,0x86,0x87,0xCC,0x2C,0xE2,0x86,0x4B};

  CompactionRequest() : dbname(), tablename(), partitionname(), type((CompactionType::type)0), runas() {
  }

  virtual ~CompactionRequest() throw() {}

  std::string dbname;
  std::string tablename;
  std::string partitionname;
  CompactionType::type type;
  std::string runas;

  _CompactionRequest__isset __isset;

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_tablename(const std::string& val) {
    tablename = val;
  }

  void __set_partitionname(const std::string& val) {
    partitionname = val;
    __isset.partitionname = true;
  }

  void __set_type(const CompactionType::type val) {
    type = val;
  }

  void __set_runas(const std::string& val) {
    runas = val;
    __isset.runas = true;
  }

  bool operator == (const CompactionRequest & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(tablename == rhs.tablename))
      return false;
    if (__isset.partitionname != rhs.__isset.partitionname)
      return false;
    else if (__isset.partitionname && !(partitionname == rhs.partitionname))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.runas != rhs.__isset.runas)
      return false;
    else if (__isset.runas && !(runas == rhs.runas))
      return false;
    return true;
  }
  bool operator != (const CompactionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompactionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CompactionRequest &a, CompactionRequest &b);


class ShowCompactRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ShowCompactRequest() {
  }

  virtual ~ShowCompactRequest() throw() {}


  bool operator == (const ShowCompactRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ShowCompactRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowCompactRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowCompactRequest &a, ShowCompactRequest &b);

typedef struct _ShowCompactResponseElement__isset {
  _ShowCompactResponseElement__isset() : partitionname(false), workerid(false), start(false), runAs(false) {}
  bool partitionname;
  bool workerid;
  bool start;
  bool runAs;
} _ShowCompactResponseElement__isset;

class ShowCompactResponseElement {
 public:

  static const char* ascii_fingerprint; // = "2F338C265DC4FD82DD13F4966FE43F13";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x33,0x8C,0x26,0x5D,0xC4,0xFD,0x82,0xDD,0x13,0xF4,0x96,0x6F,0xE4,0x3F,0x13};

  ShowCompactResponseElement() : dbname(), tablename(), partitionname(), type((CompactionType::type)0), state(), workerid(), start(0), runAs() {
  }

  virtual ~ShowCompactResponseElement() throw() {}

  std::string dbname;
  std::string tablename;
  std::string partitionname;
  CompactionType::type type;
  std::string state;
  std::string workerid;
  int64_t start;
  std::string runAs;

  _ShowCompactResponseElement__isset __isset;

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_tablename(const std::string& val) {
    tablename = val;
  }

  void __set_partitionname(const std::string& val) {
    partitionname = val;
    __isset.partitionname = true;
  }

  void __set_type(const CompactionType::type val) {
    type = val;
  }

  void __set_state(const std::string& val) {
    state = val;
  }

  void __set_workerid(const std::string& val) {
    workerid = val;
    __isset.workerid = true;
  }

  void __set_start(const int64_t val) {
    start = val;
    __isset.start = true;
  }

  void __set_runAs(const std::string& val) {
    runAs = val;
    __isset.runAs = true;
  }

  bool operator == (const ShowCompactResponseElement & rhs) const
  {
    if (!(dbname == rhs.dbname))
      return false;
    if (!(tablename == rhs.tablename))
      return false;
    if (__isset.partitionname != rhs.__isset.partitionname)
      return false;
    else if (__isset.partitionname && !(partitionname == rhs.partitionname))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.workerid != rhs.__isset.workerid)
      return false;
    else if (__isset.workerid && !(workerid == rhs.workerid))
      return false;
    if (__isset.start != rhs.__isset.start)
      return false;
    else if (__isset.start && !(start == rhs.start))
      return false;
    if (__isset.runAs != rhs.__isset.runAs)
      return false;
    else if (__isset.runAs && !(runAs == rhs.runAs))
      return false;
    return true;
  }
  bool operator != (const ShowCompactResponseElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowCompactResponseElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowCompactResponseElement &a, ShowCompactResponseElement &b);


class ShowCompactResponse {
 public:

  static const char* ascii_fingerprint; // = "915B7B8DB8966D65769C0F98707BBAE3";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x5B,0x7B,0x8D,0xB8,0x96,0x6D,0x65,0x76,0x9C,0x0F,0x98,0x70,0x7B,0xBA,0xE3};

  ShowCompactResponse() {
  }

  virtual ~ShowCompactResponse() throw() {}

  std::vector<ShowCompactResponseElement>  compacts;

  void __set_compacts(const std::vector<ShowCompactResponseElement> & val) {
    compacts = val;
  }

  bool operator == (const ShowCompactResponse & rhs) const
  {
    if (!(compacts == rhs.compacts))
      return false;
    return true;
  }
  bool operator != (const ShowCompactResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowCompactResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowCompactResponse &a, ShowCompactResponse &b);


class AddDynamicPartitions {
 public:

  static const char* ascii_fingerprint; // = "A53A2B050DCCFE6A2158480A24E33898";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x3A,0x2B,0x05,0x0D,0xCC,0xFE,0x6A,0x21,0x58,0x48,0x0A,0x24,0xE3,0x38,0x98};

  AddDynamicPartitions() : txnid(0), dbname(), tablename() {
  }

  virtual ~AddDynamicPartitions() throw() {}

  int64_t txnid;
  std::string dbname;
  std::string tablename;
  std::vector<std::string>  partitionnames;

  void __set_txnid(const int64_t val) {
    txnid = val;
  }

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_tablename(const std::string& val) {
    tablename = val;
  }

  void __set_partitionnames(const std::vector<std::string> & val) {
    partitionnames = val;
  }

  bool operator == (const AddDynamicPartitions & rhs) const
  {
    if (!(txnid == rhs.txnid))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    if (!(tablename == rhs.tablename))
      return false;
    if (!(partitionnames == rhs.partitionnames))
      return false;
    return true;
  }
  bool operator != (const AddDynamicPartitions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddDynamicPartitions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddDynamicPartitions &a, AddDynamicPartitions &b);

typedef struct _NotificationEventRequest__isset {
  _NotificationEventRequest__isset() : maxEvents(false) {}
  bool maxEvents;
} _NotificationEventRequest__isset;

class NotificationEventRequest {
 public:

  static const char* ascii_fingerprint; // = "6E578DA8AB10EED824A75534350EBAEF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x57,0x8D,0xA8,0xAB,0x10,0xEE,0xD8,0x24,0xA7,0x55,0x34,0x35,0x0E,0xBA,0xEF};

  NotificationEventRequest() : lastEvent(0), maxEvents(0) {
  }

  virtual ~NotificationEventRequest() throw() {}

  int64_t lastEvent;
  int32_t maxEvents;

  _NotificationEventRequest__isset __isset;

  void __set_lastEvent(const int64_t val) {
    lastEvent = val;
  }

  void __set_maxEvents(const int32_t val) {
    maxEvents = val;
    __isset.maxEvents = true;
  }

  bool operator == (const NotificationEventRequest & rhs) const
  {
    if (!(lastEvent == rhs.lastEvent))
      return false;
    if (__isset.maxEvents != rhs.__isset.maxEvents)
      return false;
    else if (__isset.maxEvents && !(maxEvents == rhs.maxEvents))
      return false;
    return true;
  }
  bool operator != (const NotificationEventRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationEventRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationEventRequest &a, NotificationEventRequest &b);

typedef struct _NotificationEvent__isset {
  _NotificationEvent__isset() : dbName(false), tableName(false) {}
  bool dbName;
  bool tableName;
} _NotificationEvent__isset;

class NotificationEvent {
 public:

  static const char* ascii_fingerprint; // = "ACAF0036D9999F3A389F490F5E22D369";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xAF,0x00,0x36,0xD9,0x99,0x9F,0x3A,0x38,0x9F,0x49,0x0F,0x5E,0x22,0xD3,0x69};

  NotificationEvent() : eventId(0), eventTime(0), eventType(), dbName(), tableName(), message() {
  }

  virtual ~NotificationEvent() throw() {}

  int64_t eventId;
  int32_t eventTime;
  std::string eventType;
  std::string dbName;
  std::string tableName;
  std::string message;

  _NotificationEvent__isset __isset;

  void __set_eventId(const int64_t val) {
    eventId = val;
  }

  void __set_eventTime(const int32_t val) {
    eventTime = val;
  }

  void __set_eventType(const std::string& val) {
    eventType = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
    __isset.dbName = true;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
    __isset.tableName = true;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NotificationEvent & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(eventTime == rhs.eventTime))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (__isset.dbName != rhs.__isset.dbName)
      return false;
    else if (__isset.dbName && !(dbName == rhs.dbName))
      return false;
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NotificationEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationEvent &a, NotificationEvent &b);


class NotificationEventResponse {
 public:

  static const char* ascii_fingerprint; // = "EE3DB23399639114BCD1782A0FB01818";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x3D,0xB2,0x33,0x99,0x63,0x91,0x14,0xBC,0xD1,0x78,0x2A,0x0F,0xB0,0x18,0x18};

  NotificationEventResponse() {
  }

  virtual ~NotificationEventResponse() throw() {}

  std::vector<NotificationEvent>  events;

  void __set_events(const std::vector<NotificationEvent> & val) {
    events = val;
  }

  bool operator == (const NotificationEventResponse & rhs) const
  {
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const NotificationEventResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationEventResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationEventResponse &a, NotificationEventResponse &b);


class CurrentNotificationEventId {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  CurrentNotificationEventId() : eventId(0) {
  }

  virtual ~CurrentNotificationEventId() throw() {}

  int64_t eventId;

  void __set_eventId(const int64_t val) {
    eventId = val;
  }

  bool operator == (const CurrentNotificationEventId & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const CurrentNotificationEventId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CurrentNotificationEventId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b);


class InsertEventRequestData {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  InsertEventRequestData() {
  }

  virtual ~InsertEventRequestData() throw() {}

  std::vector<std::string>  filesAdded;

  void __set_filesAdded(const std::vector<std::string> & val) {
    filesAdded = val;
  }

  bool operator == (const InsertEventRequestData & rhs) const
  {
    if (!(filesAdded == rhs.filesAdded))
      return false;
    return true;
  }
  bool operator != (const InsertEventRequestData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertEventRequestData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InsertEventRequestData &a, InsertEventRequestData &b);

typedef struct _FireEventRequestData__isset {
  _FireEventRequestData__isset() : insertData(false) {}
  bool insertData;
} _FireEventRequestData__isset;

class FireEventRequestData {
 public:

  static const char* ascii_fingerprint; // = "187E754B26707EE32451E6A27FB672CE";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x7E,0x75,0x4B,0x26,0x70,0x7E,0xE3,0x24,0x51,0xE6,0xA2,0x7F,0xB6,0x72,0xCE};

  FireEventRequestData() {
  }

  virtual ~FireEventRequestData() throw() {}

  InsertEventRequestData insertData;

  _FireEventRequestData__isset __isset;

  void __set_insertData(const InsertEventRequestData& val) {
    insertData = val;
  }

  bool operator == (const FireEventRequestData & rhs) const
  {
    if (!(insertData == rhs.insertData))
      return false;
    return true;
  }
  bool operator != (const FireEventRequestData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FireEventRequestData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FireEventRequestData &a, FireEventRequestData &b);

typedef struct _FireEventRequest__isset {
  _FireEventRequest__isset() : dbName(false), tableName(false), partitionVals(false) {}
  bool dbName;
  bool tableName;
  bool partitionVals;
} _FireEventRequest__isset;

class FireEventRequest {
 public:

  static const char* ascii_fingerprint; // = "1BA3A7F00159254072C3979B1429B50B";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xA3,0xA7,0xF0,0x01,0x59,0x25,0x40,0x72,0xC3,0x97,0x9B,0x14,0x29,0xB5,0x0B};

  FireEventRequest() : successful(0), dbName(), tableName() {
  }

  virtual ~FireEventRequest() throw() {}

  bool successful;
  FireEventRequestData data;
  std::string dbName;
  std::string tableName;
  std::vector<std::string>  partitionVals;

  _FireEventRequest__isset __isset;

  void __set_successful(const bool val) {
    successful = val;
  }

  void __set_data(const FireEventRequestData& val) {
    data = val;
  }

  void __set_dbName(const std::string& val) {
    dbName = val;
    __isset.dbName = true;
  }

  void __set_tableName(const std::string& val) {
    tableName = val;
    __isset.tableName = true;
  }

  void __set_partitionVals(const std::vector<std::string> & val) {
    partitionVals = val;
    __isset.partitionVals = true;
  }

  bool operator == (const FireEventRequest & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(data == rhs.data))
      return false;
    if (__isset.dbName != rhs.__isset.dbName)
      return false;
    else if (__isset.dbName && !(dbName == rhs.dbName))
      return false;
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.partitionVals != rhs.__isset.partitionVals)
      return false;
    else if (__isset.partitionVals && !(partitionVals == rhs.partitionVals))
      return false;
    return true;
  }
  bool operator != (const FireEventRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FireEventRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FireEventRequest &a, FireEventRequest &b);


class FireEventResponse {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FireEventResponse() {
  }

  virtual ~FireEventResponse() throw() {}


  bool operator == (const FireEventResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FireEventResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FireEventResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FireEventResponse &a, FireEventResponse &b);

typedef struct _MetaException__isset {
  _MetaException__isset() : message(false) {}
  bool message;
} _MetaException__isset;

class MetaException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MetaException() : message() {
  }

  virtual ~MetaException() throw() {}

  std::string message;

  _MetaException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const MetaException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MetaException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MetaException &a, MetaException &b);

typedef struct _UnknownTableException__isset {
  _UnknownTableException__isset() : message(false) {}
  bool message;
} _UnknownTableException__isset;

class UnknownTableException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UnknownTableException() : message() {
  }

  virtual ~UnknownTableException() throw() {}

  std::string message;

  _UnknownTableException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const UnknownTableException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnknownTableException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnknownTableException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnknownTableException &a, UnknownTableException &b);

typedef struct _UnknownDBException__isset {
  _UnknownDBException__isset() : message(false) {}
  bool message;
} _UnknownDBException__isset;

class UnknownDBException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UnknownDBException() : message() {
  }

  virtual ~UnknownDBException() throw() {}

  std::string message;

  _UnknownDBException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const UnknownDBException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnknownDBException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnknownDBException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnknownDBException &a, UnknownDBException &b);

typedef struct _AlreadyExistsException__isset {
  _AlreadyExistsException__isset() : message(false) {}
  bool message;
} _AlreadyExistsException__isset;

class AlreadyExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AlreadyExistsException() : message() {
  }

  virtual ~AlreadyExistsException() throw() {}

  std::string message;

  _AlreadyExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const AlreadyExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const AlreadyExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlreadyExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AlreadyExistsException &a, AlreadyExistsException &b);

typedef struct _InvalidPartitionException__isset {
  _InvalidPartitionException__isset() : message(false) {}
  bool message;
} _InvalidPartitionException__isset;

class InvalidPartitionException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidPartitionException() : message() {
  }

  virtual ~InvalidPartitionException() throw() {}

  std::string message;

  _InvalidPartitionException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const InvalidPartitionException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalidPartitionException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidPartitionException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidPartitionException &a, InvalidPartitionException &b);

typedef struct _UnknownPartitionException__isset {
  _UnknownPartitionException__isset() : message(false) {}
  bool message;
} _UnknownPartitionException__isset;

class UnknownPartitionException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UnknownPartitionException() : message() {
  }

  virtual ~UnknownPartitionException() throw() {}

  std::string message;

  _UnknownPartitionException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const UnknownPartitionException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UnknownPartitionException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnknownPartitionException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnknownPartitionException &a, UnknownPartitionException &b);

typedef struct _InvalidObjectException__isset {
  _InvalidObjectException__isset() : message(false) {}
  bool message;
} _InvalidObjectException__isset;

class InvalidObjectException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidObjectException() : message() {
  }

  virtual ~InvalidObjectException() throw() {}

  std::string message;

  _InvalidObjectException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const InvalidObjectException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalidObjectException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidObjectException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidObjectException &a, InvalidObjectException &b);

typedef struct _NoSuchObjectException__isset {
  _NoSuchObjectException__isset() : message(false) {}
  bool message;
} _NoSuchObjectException__isset;

class NoSuchObjectException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NoSuchObjectException() : message() {
  }

  virtual ~NoSuchObjectException() throw() {}

  std::string message;

  _NoSuchObjectException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NoSuchObjectException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchObjectException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchObjectException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NoSuchObjectException &a, NoSuchObjectException &b);

typedef struct _IndexAlreadyExistsException__isset {
  _IndexAlreadyExistsException__isset() : message(false) {}
  bool message;
} _IndexAlreadyExistsException__isset;

class IndexAlreadyExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IndexAlreadyExistsException() : message() {
  }

  virtual ~IndexAlreadyExistsException() throw() {}

  std::string message;

  _IndexAlreadyExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const IndexAlreadyExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const IndexAlreadyExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IndexAlreadyExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IndexAlreadyExistsException &a, IndexAlreadyExistsException &b);

typedef struct _InvalidOperationException__isset {
  _InvalidOperationException__isset() : message(false) {}
  bool message;
} _InvalidOperationException__isset;

class InvalidOperationException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidOperationException() : message() {
  }

  virtual ~InvalidOperationException() throw() {}

  std::string message;

  _InvalidOperationException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const InvalidOperationException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalidOperationException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperationException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidOperationException &a, InvalidOperationException &b);

typedef struct _ConfigValSecurityException__isset {
  _ConfigValSecurityException__isset() : message(false) {}
  bool message;
} _ConfigValSecurityException__isset;

class ConfigValSecurityException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ConfigValSecurityException() : message() {
  }

  virtual ~ConfigValSecurityException() throw() {}

  std::string message;

  _ConfigValSecurityException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ConfigValSecurityException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ConfigValSecurityException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigValSecurityException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConfigValSecurityException &a, ConfigValSecurityException &b);

typedef struct _InvalidInputException__isset {
  _InvalidInputException__isset() : message(false) {}
  bool message;
} _InvalidInputException__isset;

class InvalidInputException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidInputException() : message() {
  }

  virtual ~InvalidInputException() throw() {}

  std::string message;

  _InvalidInputException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const InvalidInputException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalidInputException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidInputException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidInputException &a, InvalidInputException &b);

typedef struct _NoSuchTxnException__isset {
  _NoSuchTxnException__isset() : message(false) {}
  bool message;
} _NoSuchTxnException__isset;

class NoSuchTxnException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NoSuchTxnException() : message() {
  }

  virtual ~NoSuchTxnException() throw() {}

  std::string message;

  _NoSuchTxnException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NoSuchTxnException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchTxnException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchTxnException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NoSuchTxnException &a, NoSuchTxnException &b);

typedef struct _TxnAbortedException__isset {
  _TxnAbortedException__isset() : message(false) {}
  bool message;
} _TxnAbortedException__isset;

class TxnAbortedException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TxnAbortedException() : message() {
  }

  virtual ~TxnAbortedException() throw() {}

  std::string message;

  _TxnAbortedException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TxnAbortedException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TxnAbortedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TxnAbortedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TxnAbortedException &a, TxnAbortedException &b);

typedef struct _TxnOpenException__isset {
  _TxnOpenException__isset() : message(false) {}
  bool message;
} _TxnOpenException__isset;

class TxnOpenException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TxnOpenException() : message() {
  }

  virtual ~TxnOpenException() throw() {}

  std::string message;

  _TxnOpenException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TxnOpenException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TxnOpenException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TxnOpenException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TxnOpenException &a, TxnOpenException &b);

typedef struct _NoSuchLockException__isset {
  _NoSuchLockException__isset() : message(false) {}
  bool message;
} _NoSuchLockException__isset;

class NoSuchLockException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  NoSuchLockException() : message() {
  }

  virtual ~NoSuchLockException() throw() {}

  std::string message;

  _NoSuchLockException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const NoSuchLockException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const NoSuchLockException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoSuchLockException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NoSuchLockException &a, NoSuchLockException &b);

}}} // namespace

#endif
